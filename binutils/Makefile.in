### Makefile for GNU binary-file utilities

#$Id$

srcdir = .
destdir = /usr/local

# Distribution version
VERSION=1.90
# Distribution name
DIST_NAME=binutils-beta-${VERSION}

version=`$(unsubdir)/../gcc$(subdir)/gcc -dumpversion`
prefix = $(destdir)
bindir = $(prefix)/H-$(host_alias)/T-independent/bin

# Where to find texinfo.tex to format docn with TeX
TEXIDIR = $(srcdir)/../texinfo/fsf

#INSTALL = install -c
#INSTALL_PROGRAM = $(INSTALL)
#INSTALL_FILE = $(INSTALL)

#CC=gcc -Wall
# these two are almost the same program
AR_PROG=ar
RANLIB_PROG=ranlib

# copy and strip should be the same program
COPY_PROG=copy
STRIP_PROG=strip

# These should all be the same program too.
SIZE_PROG=size
NM_PROG=nm
OBJDUMP_PROG=objdump

PROGS = $(SIZE_PROG) $(COPY_PROG) $(OBJDUMP_PROG) $(NM_PROG) $(AR_PROG) $(STRIP_PROG) $(RANLIB_PROG)
STAGESTUFF = $(PROGS) *.o

BASEDIR = $(unsubdir)/..
LIBDIR  = $(unsubdir)/../bfd$(subdir)

#### host and target dependant Makefile fragments come in here.
###

INCDIR = $(BASEDIR)/include

CFLAGS  = -g -I. -I$(INCDIR) $(HDEFINES) $(TDEFINES)

# When adding .o files, to make VPATH work in Sun Make, you have to
# also add a foo.o: foo.c line at the bottom of the file.
DISASMS = m68k-pinsn.o i960-pinsn.o sparc-pinsn.o  am29k-pinsn.o

#
## Random definitions
# Hopefully all these may be flushed once we get configuration down pat.

# alloca only needed for systems which don't have it and when cc != gcc.
# ALLOCA = alloca.o

# nm tries to malloc enough space for the string table.  The old GNU malloc
# rounds this up to a power of two (e.g. 5M becomes 8M), and so it might 
# fail unnecessarily.  I've also seen some Unix malloc's fail, even when
# there is enough memory.  So use the new GNU malloc.
# MALLOC = gmalloc.o

# Use the GNU getopt unless you have problems with it.
# The IRIS version could probably benefit from being assembled with
# libmalloc rather than the ordinary malloc.
LIBIBERTY = $(unsubdir)/../libiberty$(subdir)/libiberty.a

# Code shared by all the binutils.
BULIBS = bucomm.o version.o filemode.o

ADDL_LIBS = $(MALLOC) $(BULIBS) $(BFD) $(LIBIBERTY)

BFD = $(LIBDIR)/libbfd.a
#
## The rules

all: $(ADDL_LIBS) $(PROGS) 


#$(BFD):$(LIBDIR)/../common/*.c
#	(cd $(LIBDIR); make)

$(SIZE_PROG): $(ADDL_LIBS) size.o $(BFD)
	$(CC) $(LDFLAGS) $(CFLAGS) -o $(SIZE_PROG) size.o $(ADDL_LIBS) $(LOADLIBES)

$(COPY_PROG): $(ADDL_LIBS) copy.o $(BFD)
	$(CC) $(LDFLAGS) $(CFLAGS) -o $(COPY_PROG) copy.o $(ADDL_LIBS) $(LOADLIBES)

$(NM_PROG): $(ADDL_LIBS) nm.o $(BFD)
	$(CC) $(LDFLAGS) $(CFLAGS) -o $(NM_PROG) nm.o $(ADDL_LIBS) $(LOADLIBES)

$(OBJDUMP_PROG): $(ADDL_LIBS) size.o objdump.o $(DISASMS) $(BFD)
	$(CC) $(LDFLAGS) $(CFLAGS) -o $(OBJDUMP_PROG) objdump.o $(DISASMS) $(ADDL_LIBS) $(LOADLIBES)

$(AR_PROG): $(ADDL_LIBS) ar.o not-ranlib.o $(BFD)
	$(CC) $(LDFLAGS) $(CFLAGS) -o $(AR_PROG) ar.o not-ranlib.o $(ADDL_LIBS) $(LOADLIBES)

$(RANLIB_PROG): $(ADDL_LIBS) ar.o is-ranlib.o $(BFD)
	$(CC) $(LDFLAGS) $(CFLAGS) -o $(RANLIB_PROG) ar.o is-ranlib.o $(ADDL_LIBS) $(LOADLIBES)

# This rule creates a single binary that switches between ar and ranlib
# by looking at argv[0].  Use this kludge to save some disk space.
# However, you have to install things by hand.
# (That is after 'make install', replace the installed ranlib by a link to ar.)

# Alternatively, you can install ranlib.sh as ranlib.

ar_with_ranlib: $(ADDL_LIBS) ar.o maybe-ranlib.o $(BFD)
	$(CC) $(LDFLAGS) $(CFLAGS) -o $(AR_PROG) ar.o maybe-ranlib.o $(ADDL_LIBS) $(LOADLIBES)
	-rm -f $(RANLIB_PROG)
	-ln $(AR_PROG) $(RANLIB_PROG)

$(STRIP_PROG): $(COPY_PROG)
	-rm -f $(STRIP_PROG)
	-ln $(COPY_PROG) $(STRIP_PROG)

stage1: force
	- mkdir stage1
	- mv -f $(STAGESTUFF) stage1

stage2: force
	- mkdir stage2
	- mv -f $(STAGESTUFF) stage2

stage3: force
	- mkdir stage3
	- mv -f $(STAGESTUFF) stage3

against=stage2

comparison: force
	for i in $(STAGESTUFF) ; do cmp $$i $(against)/$$i ; done

de-stage1: force
	- (cd stage1 ; mv -f * ..)
	- rmdir stage1

de-stage2: force
	- (cd stage2 ; mv -f * ..)
	- rmdir stage2

de-stage3: force
	- (cd stage3 ; mv -f * ..)
	- rmdir stage3

######################################################################
# DOCUMENTATION TARGETS
# TeX output
binutils.dvi: binutils.texinfo
	TEXINPUTS=${TEXIDIR}:.:$$TEXINPUTS tex binutils.texinfo
	texindex binutils.??
	TEXINPUTS=${TEXIDIR}:.:$$TEXINPUTS tex binutils.texinfo

# info file for online browsing
binutils.info: binutils.texinfo
	makeinfo binutils.texinfo

# roff output (-ms)
#   edit instances of "ms" to "me" or "mm" to suit your preferences.
#   (we don't use a variable because we don't trust all makes to handle
#   a var in the target name right).
binutils.ms: binutils.texinfo
	sed -e '/\\input texinfo/d' \
		-e '/@c TEXI2ROFF-KILL/,/@c END TEXI2ROFF-KILL/d' \
		binutils.texinfo | \
	texi2roff -ms >binutils.ms 

######################################################################

clean:
	-rm -f *.o *~ \#* core $(STAGESTUFF) TAGS binutils.?? binutils.???

etags tags: TAGS

TAGS: force
	etags $(INCDIR)/*.h $(BFDSRC)/*.[hc] *.[hc]

realclean: clean
	-rm -f $(STAGESTUFF) TAGS

install: $(PROGS)
	for i in $(PROGS) ; do \
		cp $$i $(bindir)/$$i.new ; \
		mv -f $(bindir)/$$i.new $(bindir)/$$i ; \
	done

dist: $(DIST_NAME).tar.Z

$(DIST_NAME).tar.Z: proto-dir
	ln -s proto-dir $(DIST_NAME)
	tar chf - $(DIST_NAME) | compress >$(DIST_NAME).tar.Z
	rm -rf $(DIST_NAME)

bucomm.o: bucomm.c
version.o: version.c
size.o: size.c
copy.o: copy.c
objdump.o: objdump.c
m68k-pinsn.o: m68k-pinsn.c
i960-pinsn.o: i960-pinsn.c
sparc-pinsn.o: sparc-pinsn.c
am29k-pinsn.o: am29k-pinsn.c
nm.o: nm.c
ar.o: ar.c
getopt.o:getopt.c
getopt1.o:getopt1.c
filemode.o:filemode.c

#-----------------------------------------------------------------------------
#		'STANDARD' GNU/960 TARGETS BELOW THIS POINT
#
# 'VERSION' file must be present and contain a string of the form "x.y"
#-----------------------------------------------------------------------------

ver960.c: FORCE
	rm -f ver960.c
	echo "char ${TARG}_ver[]= \"${TARG} `cat VERSION`, `date`\";" > ver960.c


# Dummy target to force execution of dependent targets.
#
force:

# Target to uncomment host-specific lines in this makefile.  Such lines must
# have the following string beginning in column 1: #__<hostname>__#
# Original Makefile is backed up as 'Makefile.old'.
#
# Invoke with:  make make HOST=xxx
#
make:
	-@if test $(HOST)x = x ; then \
		echo 'Specify "make make HOST=???"'; \
		exit 1; \
	fi ; \
	grep -s "^#The next line was generated by 'make make'" Makefile; \
	if test $$? = 0 ; then	\
		echo "Makefile has already been processed with 'make make'";\
		exit 1; \
	fi ; \
	mv -f Makefile Makefile.old; \
	echo "#The next line was generated by 'make make'"	 >Makefile ; \
	echo "HOST=$(HOST)"					>>Makefile ; \
	echo							>>Makefile ; \
	sed "s/^#__$(HOST)__#//" < Makefile.old			>>Makefile

Makefile: $(srcdir)/Makefile.in $(host_makefile_frag) $(target_makefile_frag)
	$(SHELL) ./config.status

### Local Variables: ***
### mode:fundamental ***
### page-delimiter: "^#" ***
### End: ***
### end of file
