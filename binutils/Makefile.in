### Makefile for GNU binary-file utilities

#$Id$

srcdir = .
destdir = /usr/local

version=`$(srcdir)/../gcc$(subdir)/gcc -dumpversion`
prefix = $(destdir)
bindir = $(prefix)/bin
libdir = $(prefix)/lib
libsubdir = $(libdir)/gcc/$(target)/$(version)

INSTALL = install -c
INSTALL_PROGRAM = $(INSTALL)
INSTALL_FILE = $(INSTALL)

## Configuration options
# These should be all you need set before compiling

#CC=gcc -Wall
# these two should be the same program
AR_PROG=ar
RANLIB_PROG=ranlib

# copy and strip should be the same program
COPY_PROG=copy
STRIP_PROG=strip

# These should all be the same program too.
SIZE_PROG=size
NM_PROG=nm
OBJDUMP_PROG=objdump

PROGS = $(SIZE_PROG) $(COPY_PROG) $(OBJDUMP_PROG) $(NM_PROG) $(AR_PROG) $(STRIP_PROG) $(RANLIB_PROG)
STAGESTUFF = $(PROGS) *.o

BASEDIR = $(srcdir)/..
LIBDIR  = $(srcdir)/../bfd$(subdir)

#### host and target dependant Makefile fragments come in here.
###

INCDIR = $(BASEDIR)/include

CFLAGS  = -g -I$(srcdir)/../include -I$(INCDIR) $(HDEFINES) $(TDEFINES)

DISASMS = m68k-pinsn.o i960-pinsn.o sparc-pinsn.o

#
## Random definitions
# Hopefully all these may be flushed once we get configuration down pat.

# alloca only needed for systems which don't have it and when cc != gcc.
# ALLOCA = alloca.o

# nm tries to malloc enough space for the string table.  The old GNU malloc
# rounds this up to a power of two (e.g. 5M becomes 8M), and so it might 
# fail unnecessarily.  I've also seen some Unix malloc's fail, even when
# there is enough memory.  So use the new GNU malloc.
# MALLOC = gmalloc.o

# Use the GNU getopt unless you have problems with it.
# The IRIS version could probably benefit from being assembled with
# libmalloc rather than the ordinary malloc.
LIBIBERTY = $(srcdir)/../libiberty$(subdir)/libiberty.a

# Code shared by all the binutils.
BULIBS = bucomm.o version.o filemode.o

ADDL_LIBS = $(MALLOC) $(BULIBS) $(BFD) $(LIBIBERTY)

BFD = $(LIBDIR)/libbfd.a
#
## The rules

all: $(ADDL_LIBS) $(PROGS) 


#$(BFD):$(LIBDIR)/../common/*.c
#	(cd $(LIBDIR); make)

$(SIZE_PROG): $(ADDL_LIBS) size.o $(BFD)
	$(CC) $(LDFLAGS) $(CFLAGS) -o $(SIZE_PROG) size.o $(ADDL_LIBS) $(LOADLIBES)

$(COPY_PROG): $(ADDL_LIBS) copy.o $(BFD)
	$(CC) $(LDFLAGS) $(CFLAGS) -o $(COPY_PROG) copy.o $(ADDL_LIBS) $(LOADLIBES)

$(NM_PROG): $(ADDL_LIBS) nm.o $(BFD)
	$(CC) $(LDFLAGS) $(CFLAGS) -o $(NM_PROG) nm.o $(ADDL_LIBS) $(LOADLIBES)

$(OBJDUMP_PROG): $(ADDL_LIBS) size.o objdump.o $(DISASMS) $(BFD)
	$(CC) $(LDFLAGS) $(CFLAGS) -o $(OBJDUMP_PROG) objdump.o $(DISASMS) $(ADDL_LIBS) $(LOADLIBES)

$(AR_PROG): $(ADDL_LIBS) ar.o $(BFD)
	$(CC) $(LDFLAGS) $(CFLAGS) -o $(AR_PROG) ar.o $(ADDL_LIBS) $(LOADLIBES)

$(RANLIB_PROG): $(AR_PROG) 
	-rm -f $(RANLIB_PROG)
	-ln $(AR_PROG) $(RANLIB_PROG)

$(STRIP_PROG): $(COPY_PROG)
	-rm -f $(STRIP_PROG)
	-ln $(COPY_PROG) $(STRIP_PROG)

stage1: force
	- mkdir stage1
	- mv -f $(STAGESTUFF) stage1

stage2: force
	- mkdir stage2
	- mv -f $(STAGESTUFF) stage2

stage3: force
	- mkdir stage3
	- mv -f $(STAGESTUFF) stage3

against=stage2

comparison: force
	for i in $(STAGESTUFF) ; do cmp $$i $(against)/$$i ; done

de-stage1: force
	- (cd stage1 ; mv -f * ..)
	- rmdir stage1

de-stage2: force
	- (cd stage2 ; mv -f * ..)
	- rmdir stage2

de-stage3: force
	- (cd stage3 ; mv -f * ..)
	- rmdir stage3

clean:
	-rm -f *.o *~ \#* core $(STAGESTUFF) TAGS

etags tags: TAGS

TAGS: force
	etags $(INCDIR)/*.h $(BFDSRC)/*.[hc] *.[hc]

realclean: clean
	-rm -f $(STAGESTUFF) TAGS

install: $(PROGS)
	for i in $(PROGS) ; do \
		$(INSTALL_PROGRAM) $$i $(destdir)/bin/$$i ; \
	done

bucomm.o: bucomm.c
version.o: version.c
size.o: size.c
copy.o: copy.c
objdump.o: objdump.c
m68k-pinsn.o: m68k-pinsn.c
i960-pinsn.o: i960-pinsn.c
sparc-pinsn.o: sparc-pinsn.c
nm.o: nm.c
ar.o: ar.c
getopt.o:getopt.c
getopt1.o:getopt1.c
filemode.o:filemode.c
#-----------------------------------------------------------------------------
#		'STANDARD' GNU/960 TARGETS BELOW THIS POINT
#
# 'VERSION' file must be present and contain a string of the form "x.y"
#-----------------------------------------------------------------------------

ver960.c: FORCE
	rm -f ver960.c
	echo "char ${TARG}_ver[]= \"${TARG} `cat VERSION`, `date`\";" > ver960.c


# Dummy target to force execution of dependent targets.
#
force:

# Target to uncomment host-specific lines in this makefile.  Such lines must
# have the following string beginning in column 1: #__<hostname>__#
# Original Makefile is backed up as 'Makefile.old'.
#
# Invoke with:  make make HOST=xxx
#
make:
	-@if test $(HOST)x = x ; then \
		echo 'Specify "make make HOST=???"'; \
		exit 1; \
	fi ; \
	grep -s "^#The next line was generated by 'make make'" Makefile; \
	if test $$? = 0 ; then	\
		echo "Makefile has already been processed with 'make make'";\
		exit 1; \
	fi ; \
	mv -f Makefile Makefile.old; \
	echo "#The next line was generated by 'make make'"	 >Makefile ; \
	echo "HOST=$(HOST)"					>>Makefile ; \
	echo							>>Makefile ; \
	sed "s/^#__$(HOST)__#//" < Makefile.old			>>Makefile

#

Makefile: $(srcdir)/Makefile.in $(srcdir)/configure
	(cd $(srcdir) ; \
		./configure +norecurse \
		+destdir=$(destdir) \
		`if [ "$(srcdir)" != "." ] ; then echo +f; fi` \
		$(host) +target=$(target))

### Local Variables: ***
### mode:fundamental ***
### page-delimiter: "^#" ***
### End: ***
### end of file
