# Sanitize.in for devo/binutils

# Each directory to survive its way into a release will need a file
# like this one called "./.Sanitize".  All keyword lines must exist,
# and must exist in the order specified by this file.  Each directory
# in the tree will be processed, top down, in the following order.

# Hash started lines like this one are comments and will be deleted
# before anything else is done.  Blank lines will also be squashed
# out.

# The lines between the "Do-first:" line and the "Things-to-keep:"
# line are executed as a /bin/sh shell script before anything else is
# done in this directory.

Do-first:

if ( echo $* | grep keep\-mpw > /dev/null ) ; then
	keep_these_too="mpw-build.in mpw-make.in ChangeLog.mpw"
else
	lose_these_too="mpw-build.in mpw-make.in ChangeLog.mpw"
fi

# All files listed between the "Things-to-keep:" line and the
# "Files-to-sed:" line will be kept.  All other files will be removed.
# Directories listed in this section will have their own Sanitize
# called.  Directories not listed will be removed in their entirety
# with rm -rf.

Things-to-keep:

ChangeLog
Makefile.in
NEWS
README
TODO
alloca.c
ar.1
ar.c
arlex.l
arparse.y
arsup.c
arsup.h
binutils.texi
bucomm.c
bucomm.h
c++filt.1
configure.bat
configure.in
config
filemode.c
gmalloc.c
is-ranlib.c
is-strip.c
maybe-ranlib.c
maybe-strip.c
nlmconv.1
nlmconv.c
nlmconv.h
nlmheader.y
nm.1
nm.c
not-ranlib.c
not-strip.c
objcopy.1
objcopy.c
objdump.1
objdump.c
ranlib.1
ranlib.sh
sanity.sh
size.1
size.c
strings.1
strings.c
strip.1
testsuite
version.c

Things-to-lose:

Do-last:

ppcfiles="ChangeLog nlmconv.c"
if ( echo $* | grep keep\-powerpc\-netware > /dev/null ) ; then
	if [ -n "${verbose}" ] ; then
		echo Keeping PowerPC NetWare stuff in $ppcfiles.
	fi
else
	if [ -n "${verbose}" ]; then
		echo -n Removing PowerPC NetWare in `pwd`:
	fi
	for f in $ppcfiles ; do
		if [ -n "${verbose}" ] ; then
			echo -n " " $f
		fi
		sed '/start\-sanitize\-powerpc\-netware/,/end\-sanitize\-powerpc\-netware/d' < $f > new
		if [ -n "${safe}" ] ; then
			mv $f .Recover
		fi
		mv new $f
	done
fi
