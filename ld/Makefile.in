#
# Makefile for ld version 2
#
# $Id$
#

srcdir = .

BASEDIR = $(srcdir)/..
BFDDIR = $(BASEDIR)/bfd
INCLUDE	= $(BASEDIR)/include-cygnus
INCLUDES = -I. -I$(srcdir) -I$(INCLUDE) -I$(BFDDIR)
DEBUG	= -g
CFLAGS	= $(INCLUDES) $(DEBUG) 

# go directly to ld.new in case this ld isn't capable of
# linking native object on this host.  It can be renamed on
# install.
PROGS	= ld.new

# for self hosting
GNUTARGET=a.out-generic-big
LDEMULATION=gld
bfdlib=$(BASEDIR)/bfd/Host-$(host)/libbfd.a

OBJS= ldgram.o ldlex.o ldlang.o ldmain.o ldwrite.o ldexp.o ld-lnk960.o \
	ld-gld.o ld-gld960.o ld-emul.o ldversion.o ldmisc.o ldsym.o ldfile.o

HEADERS=config.h ldmain.h ldmain.h ldmisc.h ldsym.h ldlang.h ldexp.h \
	ldlex.h ldwrite.h ldversion.h ld-emul.h ldfile.h ldgram.h ld.h

MANSOURCES=ld.tex

LDCSOURCES=ldlang.c ldmain.c ldwrite.c ld-lnk960.c ld-gld.c \
	ld-gld960.c ld-emul.c ldversion.c ldmisc.c ldexp.c ldsym.c ldfile.c

GENERATED_SOURCES=ldgram.tab.c ldlex.c ldgram.tab.h y.tab.h
GENERATED_HEADERS=ldgram.tab.h

LDSOURCES=$(LDCSOURCES) ldgram.y ldlex.l

#BFDSOURCES=../bfd/libbfd.c ../bfd/bfd.c  ../bfd/sunos.c ../bfd/icoff.c ../bfd/b.out.c   ../bfd/archive.c  ../bfd/srec.c

SOURCES= $(LDSOURCES) $(BFDSOURCES)
LINTSOURCES=   $(LDCSOURCES) $(BFDSOURCES) $(GENERATED_SOURCES)

all: $(PROGS)

$(PROGS): $(OBJS)
#	(cd ../bfd; make)
#	LDEMULATION=gld; export LDEMULATION;  GNUTARGET=a.out-generic-big;./ldok -format a.out-generic-big  -o ld /lib/crt0.o   $(OBJS) $(bfdlib) -lc /usr/local/lib/gcc/sparc/1.91/gnulib
#	gld -o ld /lib/crt0.o   $(OBJS) $(bfdlib) -lc /usr/local/lib/gcc/sparc/1.91/gnulib
	$(CC) -Bstatic -o ld.new $(OBJS) $(bfdlib)


ld1: ld
	gcc -v  -B./ -o ld1  $(OBJS) $(bfdlib)

ld2: ld1
	mv ld1 ld
	gcc -v  -B./ -o ld2  $(OBJS) $(bfdlib)

ld3: ld2
	mv ld2 ld
	gcc -v  -B./ -o ld3  $(OBJS) $(bfdlib)

ld.dvi:ld.tex
	tex ld.tex

ldgram.o:ldgram.y
	yacc -d $(srcdir)/ldgram.y
	mv y.tab.c ldgram.tab.c
	$(CC) -c $(CFLAGS) ldgram.tab.c
	mv ldgram.tab.o ldgram.o

ldgram.tab.h:ldgram.o 
	cp y.tab.h ldgram.tab.h
	
ldlex.c: ldlex.l ldgram.tab.h
ldlex.o: ldlex.c ldgram.tab.h

ldmain.o: ldmain.c
ldversion.o: ldversion.c
ldfile.o: ldfile.c
ldwrite.o: ldwrite.c
ldlang.o: ldlang.c ldgram.tab.h
ld-gld.o: ld-gld.c
ld-gld960.o: ld-gld960.c
ld-emul.o:ld-emul.c
ld-lnk960.o:ld-lnk960.c
ldexp.o:ldexp.c ldgram.tab.h
ldmisc.o:ldmisc.c 
ldsym.o:ldsym.c 

clean:
	- rm -f $(OBJS) $(GENERATED_SOURCES) $(GENERATED_HEADERS)
	- rm -f ld ld1 ld2


lintlog:$(SOURCES) Makefile
	$(LINT) -abhxzn  $(CFLAGS)  $(LINTSOURCES) \
| grep -v "pointer casts may be troublesome" \
| grep -v "possible pointer alignment problem" \
| grep -v "ignore" \
| grep -v "conversion from long may lose accuracy" \
| grep -v "warning: constant argument to NOT" \
| grep -v "enumeration type clash, operator CAST" \
| grep -v "warning: constant in conditional context"\
| grep -v "archive\.c"


tags TAGS:$(SOURCES) $(HEADERS)
	etags -t $(SOURCES) $(HEADERS)

release:
	(cd /4/steve/ld; tar cf -  $(LDSOURCES) $(HEADERS) $(MANSOURCES)) | tar xf - 

objdump:objdump.c 

install: $(PROGS)
	rm -f $G960BASE/bin/$(PROGS)
	cp $(PROGS) $$G960BASE/bin/gld960c

#-----------------------------------------------------------------------------
#		'STANDARD' GNU/960 TARGETS BELOW THIS POINT
#
# 'VERSION' file must be present and contain a string of the form "x.y"
#-----------------------------------------------------------------------------

ver960.c: FORCE
	rm -f ver960.c
	echo "char ${TARG}_ver[]= \"${TARG} `cat VERSION`, `date`\";" > ver960.c


# This target should be invoked before building a new release.
# 'VERSION' file must be present and contain a string of the form "x.y"
#
roll:
	@V=`cat VERSION`		; \
	MAJ=`sed 's/\..*//' VERSION`	; \
	MIN=`sed 's/.*\.//' VERSION`	; \
	V=$$MAJ.`expr $$MIN + 1`	; \
	rm -f VERSION			; \
	echo $$V >VERSION		; \
	echo Version $$V

# Dummy target to force execution of dependent targets.
#
.force:
FORCE:

# Target to uncomment host-specific lines in this makefile.  Such lines must
# have the following string beginning in column 1: #__<hostname>__#
# Original Makefile is backed up as 'Makefile.old'.
#
# Invoke with:  make make HOST=xxx
#
make:
	-@if test $(HOST)x = x ; then \
		echo 'Specify "make make HOST=???"'; \
		exit 1; \
	fi ; \
	grep -s "^#The next line was generated by 'make make'" Makefile; \
	if test $$? = 0 ; then	\
		echo "Makefile has already been processed with 'make make'";\
		exit 1; \
	fi ; \
	mv -f Makefile Makefile.old; \
	echo "#The next line was generated by 'make make'"	 >Makefile ; \
	echo "HOST=$(HOST)"					>>Makefile ; \
	echo							>>Makefile ; \
	sed "s/^#__$(HOST)__#//" < Makefile.old			>>Makefile

#

Makefile: $(srcdir)/Makefile.in $(srcdir)/configure
	(cd $(srcdir) ; configure -host=$(host) $(target))

### Local Variables: ***
### mode:fundamental ***
### page-delimiter: "^#" ***
### End: ***
### end of file
