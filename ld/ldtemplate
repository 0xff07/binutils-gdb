/* NOTE: If there are angle brackets here: <TARGET> then this is a
 * template file (ldtemplate), intended for processing by sed.
 * Otherwise, this file has already been processed by sed,
 * and customized for a particular emulation target.
 * In that DO NOT EDIT the file; edit ldtemplate instead.
 */

/* Copyright (C) 1991 Free Software Foundation, Inc.

This file is part of GLD, the Gnu Linker.

GLD is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 1, or (at your option)
any later version.

GLD is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GLD; see the file COPYING.  If not, write to
the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */

/*
 *  $Id:#
*/

/* 
 * emulate the original gld for the given <TARGET>
 *
 * Written by Steve Chamberlain steve@cygnus.com
 */

#define TARGET_IS_<TARGET>


#include "bfd.h"
#include "sysdep.h"
#include "ld.h"
#include "config.h"
#include "ldemul.h"
#include "ldfile.h"
#include "ldmisc.h"

extern  boolean lang_float_flag;


extern enum bfd_architecture ldfile_output_architecture;
extern unsigned long ldfile_output_machine;
extern char *ldfile_output_machine_name;

extern bfd *output_bfd;



static void gld<target>_before_parse()
{
#ifdef TARGET_IS_M88KBCS
  extern char lprefix;
  lprefix = '@';
#else
#ifndef TARGET_ /* I.e., if not generic */
  ldfile_output_architecture = bfd_arch_<arch>;
#endif
#endif
}


static void 
gld<target>_after_parse()
{

}

static void
gld<target>_after_allocation()
{

}

static void
gld<target>_before_allocation()
{

}


static void
gld<target>_set_output_arch()
{
  /* Set the output architecture and machine if possible */
  bfd_set_arch_mach(output_bfd,
	            ldfile_output_architecture, ldfile_output_machine);
}

static char *
gld<target>_choose_target()
{
  char *from_outside = getenv(TARGET_ENVIRON);
  if (from_outside != (char *)NULL)
    return from_outside;
  return GLD<TARGET>_TARGET;
}

static void
gld<target>_syslib()
{
  info("%S SYSLIB ignored\n");
}

static void
gld<target>_hll(ignore)
char  *ignore;
{
  info("%S HLL ignored\n");
}

static char *gld<target>_script =  
#include "<ldtarget>.x"
;
static char *gld<target>_script_option_Ur  =  
#include "<ldtarget>.xu"
;
static char *gld<target>_script_option_r  =  
#include "<ldtarget>.xr"
;
static char *gld<target>_script_option_n  =  /* Used with -n flag. */
#include "<ldtarget>.xn"
;
static char *gld<target>_script_option_N  =  /* Used with -N flag. */
#include "<ldtarget>.xN"
;

static char *gld<target>_get_script()
{			     
  extern ld_config_type config;
  if (config.relocateable_output == true &&
      config.build_constructors == true) {
    return gld<target>_script_option_Ur;
  }
  if (config.relocateable_output == true) {
    return gld<target>_script_option_r;
  }
  if (!config.text_read_only)
    return gld<target>_script_option_N;
  if (!config.magic_demand_paged)
    return gld<target>_script_option_n;
  return gld<target>_script;
}
struct ld_emulation_xfer_struct ld_gld<target>_emulation = 
{
  gld<target>_before_parse,
  gld<target>_syslib,
  gld<target>_hll,
  gld<target>_after_parse,
  gld<target>_after_allocation,
  gld<target>_set_output_arch,
  gld<target>_choose_target,
  gld<target>_before_allocation,
  gld<target>_get_script,
};
