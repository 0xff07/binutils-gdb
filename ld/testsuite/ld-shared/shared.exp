# Expect script for ld-shared tests
#   Copyright (C) 1994,1995 Free Software Foundation
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
#
# Written by Ian Lance Taylor (ian@cygnus.com)
#

# Make sure that ld can generate ELF shared libraries.
# Note that linking against ELF shared libraries is tested by the
# bootstrap test.

# This test can only be run if ld generates native executables.
if ![isnative] then {return}

# This test can only be run on a couple of ELF platforms.
# Square bracket expressions seem to confuse istarget.
if { ![istarget i386-*-sysv4*] \
     && ![istarget i486-*-sysv4*] \
     && ![istarget i586-*-sysv4*] \
     && ![istarget i386-*-unixware] \
     && ![istarget i486-*-unixware] \
     && ![istarget i586-*-unixware] \
     && ![istarget i386-*-elf*] \
     && ![istarget i486-*-elf*] \
     && ![istarget i586-*-elf*] \
     && ![istarget sparc*-*-elf] \
     && ![istarget sparc*-*-solaris2*]} then {
    return
}

# The test procedure.
proc shared_test { progname testname main sh1 sh2 } {
    global ld
    global srcdir
    global subdir
    global exec_output
    global host_triplet

    # Build the shared library.
    if {![ld_simple_link $ld tmpdir/$progname.so "-shared tmpdir/$sh1 tmpdir/$sh2"]} {
        fail "$testname"
    	return
    }

    # Link against the shared library.  Use -rpath so that the
    # dynamic linker can locate the shared library at runtime.
    if ![ld_link $ld tmpdir/$progname "-rpath tmpdir tmpdir/$main tmpdir/$progname.so"] {
    	fail "$testname"
    	return
    }

    # Run the resulting program
    send_log "tmpdir/$progname >tmpdir/$progname.out\n"
    verbose "tmpdir/$progname >tmpdir/$progname.out"
    catch "exec tmpdir/$progname >tmpdir/$progname.out" exec_output
    if ![string match "" $exec_output] then {
	send_log "$exec_output\n"
	verbose "$exec_output"
	fail "$testname"
    	return
    }

    send_log "diff tmpdir/$progname.out $srcdir$subdir/shared.dat\n"
    verbose "diff tmpdir/$progname.out $srcdir$subdir/shared.dat"
    catch "exec diff tmpdir/$progname.out $srcdir$subdir/shared.dat" exec_output
    set exec_output [prune_system_crud $host_triplet $exec_output]

    if {![string match "" $exec_output]} then {
	send_log "$exec_output\n"
	verbose "$exec_output"
	fail "$testname"
        return
    }

    pass "$testname"
}

# Unfortunately, the gcc argument is -fpic and the cc argument is
# -KPIC.  We have to try both.

set picflag "-fpic"
send_log "$CC $picflag\n"
verbose "$CC $picflag"
catch "exec $CC $picflag" exec_output
send_log "$exec_output\n"
verbose "--" "$exec_output"
if { [string match "*illegal option*" $exec_output] \
     || [string match "*option ignored*" $exec_output] \
     || [string match "*unrecognized option*" $exec_output] } then {
    set picflag "-KPIC"
}
verbose "Using $picflag to compile PIC code"

# Compile the main program.
if ![ld_compile "$CC $CFLAGS" $srcdir$subdir/main.c tmpdir/mainnp.o] {
    unresolved "shared (non PIC)"
    unresolved "shared"
} else {
    # The shared library is composed of two files.  First compile them
    # without using -fpic.  That should work on an ELF system,
    # although it will be less efficient because the dynamic linker
    # will need to do more relocation work.  However, note that not
    # using -fpic will cause some of the tests to return different
    # results.
    if { ![ld_compile "$CC $CFLAGS" $srcdir$subdir/sh1.c tmpdir/sh1np.o]
	 || ![ld_compile "$CC $CFLAGS" $srcdir$subdir/sh2.c tmpdir/sh2np.o] } {
	unresolved "shared (non PIC)"
    } else {
	shared_test shnp "shared (non PIC)" mainnp.o sh1np.o  sh2np.o
    }

    # Now compile the code using -fpic.

    if { ![ld_compile "$CC $CFLAGS $picflag" $srcdir$subdir/sh1.c tmpdir/sh1p.o] 
	 || ![ld_compile "$CC $CFLAGS $picflag" $srcdir$subdir/sh2.c tmpdir/sh2p.o] } {
	unresolved "shared"
    } else {
	shared_test shp "shared" mainnp.o sh1p.o sh2p.o
    }
}

# Now do the same tests again, but this time compile main.c PIC.
if ![ld_compile "$CC $CFLAGS $picflag" $srcdir$subdir/main.c tmpdir/mainp.o] {
    unresolved "shared (PIC main, non PIC so)"
    unresolved "shared (PIC main)"
} else {
    if { [file exists tmpdir/sh1np.o ] && [ file exists tmpdir/sh2np.o ] } {
	shared_test shmpnp "shared (PIC main, non PIC so)" mainp.o sh1np.o sh2np.o
    } else {
	unresolved "shared (PIC main, non PIC so)"
    }

    if { [file exists tmpdir/sh1p.o ] && [ file exists tmpdir/sh2p.o ] } {
	shared_test shmpp "shared (PIC main)" mainp.o sh1p.o sh2p.o
    } else {
	unresolved "shared (PIC main)"
    }
}
