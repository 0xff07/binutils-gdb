dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.3)dnl
AC_INIT(Makefile.in)

AC_CONFIG_HEADER(config.h:config.in)

AC_CONFIG_AUX_DIR(`cd $srcdir;pwd`/../..)
AC_CANONICAL_SYSTEM
AC_ARG_PROGRAM

. ${srcdir}/../../bfd/configure.host

AC_PROG_CC
AC_SUBST(CFLAGS)
AC_SUBST(HDEFINES)
AR=${AR-ar}
AC_SUBST(AR)
AC_PROG_RANLIB

# Put a plausible default for CC_FOR_BUILD in Makefile.
AC_C_CROSS
if test "x$cross_compiling" = "xno"; then
  CC_FOR_BUILD='$(CC)'
else
  CC_FOR_BUILD=gcc
fi
AC_SUBST(CC_FOR_BUILD)

AC_CHECK_HEADERS(string.h strings.h stdlib.h time.h sys/times.h)

AC_OUTPUT(Makefile,
[case x$CONFIG_HEADERS in xconfig.h:config.in) echo > stamp-h ;; esac])

if test x"$enable_sim_cflags" != x"" -a x"$enable_sim_cflags" != x"no"; then
  if test "$enable_sim_cflags" = "yes"; then
    enable_sim_cflags="-fomit-frame-pointer,-O2"
  fi
  echo "Setting SIM_CFLAGS=$enable_sim_cflags" | sed -e "s/,/ /g" 1>&6
  (echo; echo "# --enable-sim-cflags=$enable_sim_cflags";
   echo "SIM_CFLAGS = $enable_sim_cflags" | sed -e "s/,/ /g") >> Makefile
else
  echo "Setting SIM_CFLAGS=" 1>&6
  (echo; echo "# no --enable-sim-cflags"; echo "SIM_CFLAGS =") >> Makefile
fi

$srcdir/config.make Makefile CONFIG_FILE --enable-sim-config "$enable_sim_config" \
  "" "std-config.h" "no" "std-config.h" "yes" "std-config.h" "*" "$enable_sim_config" 1>&6

$srcdir/config.make Makefile IGEN_OPCODE_RULES --enable-sim-opcode "$enable_sim_opcode" \
  "" "ppc-opcode-simple" "no" "ppc-opcode-simple" "yes" "ppc-opcode-simple" \
  "complex" "ppc-opcode-complex" "simple" "ppc-opcode-simple" "stupid" "ppc-opcode-stupid" 1>&6

$srcdir/config.make Makefile DGEN_FLAGS --enable-sim-switch "$enable_sim_switch" \
  "" "" "no" "" "yes" "-s" 1>&6

$srcdir/config.make Makefile IGEN_DUPLICATE --enable-sim-duplicate "$enable_sim_duplicate" \
  "" "" "no" "" "yes" "-e" 1>&6

$srcdir/config.make Makefile IGEN_FILTER --enable-sim-filter "$enable_sim_filter" \
  "" "-f 64" "no" "" "yes" "-f 64" "*" "$enable_sim_filter" 1>&6

$srcdir/config.make Makefile IGEN_ICACHE --enable-sim-icache "$enable_sim_icache" \
  "" "" "no" "" "yes" "-r 1024" "*" "-r $enable_sim_icache" 1>&6

flags=""
if test x"$enable_sim_inline" != x""; then
  case "$enable_sim_inline" in
    no)		flags="";;
    0)		flags=" -DDEFAULT_INLINE=0";;
    yes | 2)	flags=" -DDEFAULT_INLINE=2";;
    1)		flags=" -DDEFAULT_INLINE=1";;
    *) for x in `echo "$enable_sim_inline" | sed -e "s/,/ /g"`; do
	 case "$x" in
	   *_INLINE=*)	flags="$flags -D$x";;
	   *_INLINE)	flags="$flags -D$x=2";;
	   *=*)		x=`sed -e "s/=/_INLINE=/"`; flags="$flags -D$x";;
	   *)		flags="$flags -D$x""_INLINE=2";;
	 esac
       done;;
  esac
fi
if test x"$flags" != x""; then
  echo "Setting INLINE_CFLAGS=$flags" 1>&6
  (echo; echo "# --enable-sim-inline=$enable_sim_inline"; echo "INLINE_CFLAGS =$flags") >> Makefile
else
  echo "Setting INLINE_CFLAGS=" 1>&6
  (echo; echo "# no --enable-sim-inline"; echo "INLINE_CFLAGS =") >> Makefile 
fi

$srcdir/config.hdr config.h WITH_BSWAP --enable-sim-bswap "$enable_sim_bswap" "yes" 1

case "$target" in
  *powerpc-*) endian="BIG_ENDIAN";;
  *powerpcle-*) endian="LITTLE_ENDIAN";;
  *) echo "Unknown $target" 1>&6; endian="0";;
esac

$srcdir/config.hdr config.h WITH_TARGET_BYTE_ORDER --enable-sim-endian "$enable_sim_endian" \
  "" "0" "no" "0" "yes" "$endian" \
  "b" "BIG_ENDIAN" "big" "BIG_ENDIAN" "big-endian" "BIG_ENDIAN" \
  "B" "BIG_ENDIAN" "BIG" "BIG_ENDIAN" "BIG-ENDIAN" "BIG_ENDIAN" \
  "l" "LITTLE_ENDIAN" "little" "LITTLE_ENDIAN" "little-endian" "LITTLE_ENDIAN" \
  "L" "LITTLE_ENDIAN" "little" "LITTLE_ENDIAN" "little-endian" "LITTLE_ENDIAN" 1>&6

$srcdir/config.hdr config.h WITH_HOST_BYTE_ORDER --enable-sim-hostendian "$enable_sim_hostendian" \
  "b" "BIG_ENDIAN" "big" "BIG_ENDIAN" "big-endian" "BIG_ENDIAN" \
  "B" "BIG_ENDIAN" "BIG" "BIG_ENDIAN" "BIG-ENDIAN" "BIG_ENDIAN" \
  "l" "LITTLE_ENDIAN" "little" "LITTLE_ENDIAN" "little-endian" "LITTLE_ENDIAN" \
  "L" "LITTLE_ENDIAN" "little" "LITTLE_ENDIAN" "little-endian" "LITTLE_ENDIAN" 1>&6

$srcdir/config.hdr config.h WITH_SMP --enable-sim-smp "$enable_sim_smp" \
  "" "0" "no" "0" "yes" "2" "*" "$enable_sim_smp" 1>&6

$srcdir/config.hdr config.h WITH_TARGET_WORD_BITSIZE --enable-sim-bitsize "$enable_sim_bitsize" \
  "yes" "32" "32" "32" "32" "64" "64" 1>&6

$srcdir/config.hdr config.h WITH_HOST_WORD_BITSIZE --enable-sim-hostbitsize "$enable_sim_hostbitsize" \
  "yes" "32" "32" "32" "32" "64" "64" 1>&6

$srcdir/config.hdr config.h WITH_ENVIRONMENT --enable-sim-env "$enable_sim_env" \
  "yes" "0" \
  "operating" "OPERATING_ENVIRONMENT" "os" "OPERATING_ENVIRONMENT" "oea" "OPERATING_ENVIRONMENT" \
  "virtual" "VIRTUAL_ENVIRONMENT" "vea" "VIRTUAL_ENVIRONMENT" \
  "user" "USER_ENVIRONMENT" "uea" "USER_ENVIRONMENT" \
  1>&6

$srcdir/config.hdr config.h WITH_TIME_BASE --enable-sim-timebase "$enable_sim_timebase" \
  "no" "0" "yes" "1" 1>&6

$srcdir/config.hdr config.h WITH_ALIGNMENT --enable-sim-alignment "$enable_sim_alignment" \
  "no" "NONSTRICT_ALIGNMENT" "nonstrict" "NONSTRICT_ALIGNMENT" \
  "yes" "STRICT_ALIGNMENT" "strict" "STRICT_ALIGNMENT" 1>&6

$srcdir/config.hdr config.h WITH_FLOATING_POINT --enable-sim-float "$enable_sim_float" \
  "no" "SOFT_FLOATING_POINT" "soft" "SOFT_FLOATING_POINT" \
  "yes" "HARD_FLOATING_POINT" "hard" "HARD_FLOATING_POINT" 1>&6

$srcdir/config.hdr config.h WITH_TRACE --enable-sim-trace "$enable_sim_trace" \
  "no" "0" "yes" "1" 1>&6

$srcdir/config.hdr config.h WITH_ASSERT --enable-sim-assert "$enable_sim_assert" \
  "no" "0" "yes" "1" 1>&6

$srcdir/config.hdr config.h WITH_MON --enable-sim-monitor "$enable_sim_monitor" \
  "no" "0" "yes" "MONITOR_INSTRUCTION_ISSUE|MONITOR_LOAD_STORE_UNIT" \
  "instruction" "MONITOR_INSTRUCTION_ISSUE" \
  "memory" "MONITOR_LOAD_STORE_UNIT" 1>&6
