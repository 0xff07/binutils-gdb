#    Makefile template for Configure for simulator common parts
#    Copyright (C) 1996 Free Software Foundation, Inc.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

default: all

VPATH = @srcdir@
srcdir = @srcdir@
srcroot = $(srcdir)/../..

prefix = @prefix@
exec_prefix = @exec_prefix@

host_alias = @host_alias@
target_alias = @target_alias@
program_transform_name = @program_transform_name@
bindir = @bindir@

libdir = @libdir@
tooldir = $(libdir)/$(target_alias)

datadir = @datadir@
mandir = @mandir@
man1dir = $(mandir)/man1
infodir = @infodir@
includedir = @includedir@

SHELL = /bin/sh

INSTALL = $(srcroot)/install.sh -c
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_XFORM = $(INSTALL) -t='$(program_transform_name)'
INSTALL_XFORM1= $(INSTALL_XFORM) -b=.1

CC = @CC@
CC_FOR_BUILD = @CC_FOR_BUILD@
CPP = @CPP@
CPP_FOR_TARGET = @CPP_FOR_TARGET@
TARGET_SUBDIR = @TARGET_SUBDIR@
CFLAGS = @CFLAGS@
SIM_CFLAGS = @sim_cflags@

HDEFINES = @HDEFINES@
TDEFINES =

CONFIG_CFLAGS = @DEFS@ $(SIM_CFLAGS) $(HDEFINES) $(TDEFINES)
CSEARCH = -I. -I$(srcdir) -I$(srcroot)/include
ALL_CFLAGS = $(CFLAGS) $(CONFIG_CFLAGS) $(CSEARCH)
BUILD_CFLAGS = -g -O $(CSEARCH)

AR = @AR@
AR_FLAGS = rc
RANLIB = @RANLIB@
MAKEINFO = makeinfo

.NOEXPORT:
MAKEOVERRIDES=

all: libcommon.a

LIB_OBJS = callback.o targ-map.o

# FIXME: Ideally, callback.o and friends live in a library outside of
# both the gdb and simulator source trees (e.g. devo/remote.  Not
# devo/libremote because this directory would contain more than just
# a library).

libcommon.a: $(LIB_OBJS)
	rm -f libcommon.a
	$(AR) $(ARFLAGS) libcommon.a $(LIB_OBJS)
	$(RANLIB) libcommon.a

callback.o: callback.c targ-vals.h $(srcroot)/include/callback.h

targ-map.o: targ-map.c targ-vals.h

# Generate TARG_VALS_H for newlib using devo and build tree.
# This file is shipped with distributions so we build in the source dir.
# This is built in srcdir so putting dependencies here is risky.
# Use `make headers' to rebuild.
headers: nltvals.def
.PHONY: headers

# Note: If gdb releases begin to contain target header files, generate
# targ-vals.def at build time.

nltvals.def: Makefile gentvals.sh
	rootme=`pwd` ; \
	cd $(srcdir) ; \
	rm -f nltvals.new ; \
	echo '/* Newlib macro values needed by simulator.  */' >nltvals.new ; \
	echo '/* This file is machine generated by gentvalh.sh.  */' >>nltvals.new ; \
	$(SHELL) $(srcdir)/gentvals.sh errno $(srcroot)/newlib/libc/include \
	  "errno.h sys/errno.h" 'E[A-Z0-9]*' "$(CPP_FOR_TARGET)" >>nltvals.new ; \
	$(SHELL) $(srcdir)/gentvals.sh signal $(srcroot)/newlib/libc/include \
	  "signal.h sys/signal.h" 'SIG[A-Z0-9]*' "$(CPP_FOR_TARGET)" >>nltvals.new ; \
	$(SHELL) $(srcdir)/gentvals.sh open $(srcroot)/newlib/libc/include \
	  "fcntl.h sys/fcntl.h" 'O_[A-Z0-9]*' "$(CPP_FOR_TARGET)" >>nltvals.new ; \
	$(srcroot)/move-if-change nltvals.new nltvals.def

gentmap: Makefile gentmap.c
	$(CC_FOR_BUILD) $(srcdir)/gentmap.c -o gentmap $(BUILD_CFLAGS)

targ-vals.h: Makefile gentmap
	rm -f targ-vals.h
	./gentmap -h >targ-vals.h

targ-map.c: Makefile gentmap
	rm -f targ-map.c
	./gentmap -c >targ-map.c

.c.o:
	$(CC) -c $< $(ALL_CFLAGS)

check:

info:
clean-info:
install-info:

tags etags: TAGS

TAGS: force
	etags *.c *.h

clean:
	rm -f *.[oa] *~ core gentmap
	rm -f $(ALL)

distclean mostlyclean maintainer-clean realclean: clean
	rm -f TAGS
	rm -f Makefile config.cache config.log config.status
	rm -f config.h stamp-h

# Dummy target to force execution of dependent targets.
force:

# Copy the files into directories where they will be run.
install:

install-man:
	$(INSTALL_XFORM1) $(srcdir)/run.1 $(man1dir)/run.1

Makefile: Makefile.in config.status
	$(SHELL) ./config.status

config.status: configure
	$(SHELL) ./config.status --recheck

# We can't add dependencies to configure because it causes too much trouble
# to end users if configure's timestamp is out of sync.
.PHONY: run-autoconf
run-autoconf:
	cd $(srcdir) && autoconf

config.h: stamp-h ; @true
stamp-h: config.in config.status
	CONFIG_FILES= CONFIG_HEADERS=config.h:config.in $(SHELL) ./config.status
