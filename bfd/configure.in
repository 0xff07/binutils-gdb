# This file is a shell script that supplies the information necessary
# to tailor a template configure script into the configure script
# appropriate for this directory.  For more information, check any
# existing configure script.

configdirs="doc"
srctrigger=libbfd.c
srcname="BFD"
target_dependent=true
host64=false
target64=false
want64=false

# per-host:

. ${srcdir}/configure.host

# Set up to make a link between the host's include file and "sysdep.h".
files="hosts/${my_host}.h"
links="sysdep.h"

if [ ! -f ${srcdir}/${files} ] ; then
	files=../bfd/hosts/std-host.h
	echo "[${srcname} has no specific support for host ${host} -- using std-host]"
fi

host_makefile_frag=
if [ -f ${srcdir}/config/${my_host}.mh ] ; then
	host_makefile_frag=config/${my_host}.mh
fi

# per-target:

# WHEN ADDING ENTRIES TO THIS MATRIX:
#  Make sure that the left side always has two dashes.  Otherwise you
#  can get spurious matches.  Even for unambiguous cases, do this as a
#  convention, else the table becomes a real mess to understand and maintain.

case "${target}" in
  alpha-*-*)		bfd_target=alphaosf ;;
  a29k-*-ebmon)		bfd_target=a29k-coff ;;
  a29k-*-udi)		bfd_target=a29k-coff ;;
  a29k-*-aout)		bfd_target=a29k-aout ;;
  a29k-*-coff)		bfd_target=a29k-coff ;;
  a29k-*-sym1)		bfd_target=a29k-coff ;;
  h8300*-*-*)		bfd_target=h8300-coff ;;
  h8500-*-*)		bfd_target=h8500-coff ;;
  sh-*-*)		bfd_target=sh-coff ;;
  hppa*-*-bsd*)		bfd_target=hppabsd ;;
  hppa*-*-hpux*)	bfd_target=hppahpux ;;
  hppa*-*-osf)		bfd_target=hppa-elf ;;
  i[34]86-*-sysv4*)	bfd_target=i386-elf ;;
  i[34]86-*-sysv*)	bfd_target=i386-coff ;;
  i[34]86-*-isc*)	bfd_target=i386-sco ;; # gets core dump reading right
  i[34]86-*-sco*)	bfd_target=i386-sco ;;
  i[34]86-*-bsd*)	bfd_target=i386-bsd ;;
  i[34]86-*-lynxos*)	bfd_target=i386-lynx ;;
  i[34]86-*-coff)	bfd_target=i386-coff ;;
  i[34]86-*-aix*)	bfd_target=i386-coff ;;
  i[34]86-*-elf)	bfd_target=i386-elf ;;
  i[34]86-*-netware*)	bfd_target=i386-nlm ;;
  i[34]86-*-linux*)	bfd_target=i386-linux ;;
  i[34]86-*-lynx*)	bfd_target=i386-lynx ;;
  i[34]86-none-*)	bfd_target=i386-coff ;;
  i960-*-vxworks)	bfd_target=i960-bout ;;
  i960-*-aout)		bfd_target=i960-bout ;;
  i960-*-bout)		bfd_target=i960-bout ;;
  m68*-bull-sysv*)	bfd_target=u68k-coff ;;
  m68*-hp-bsd*)		bfd_target=hp300bsd ;;
  m68*-*-aout)		bfd_target=m68k-aout ;;
  m68*-*-coff)		bfd_target=m68k-coff ;;
  m68*-*-hpux*)		bfd_target=hp300hpux ;;
  m68*-*-os68k)		bfd_target=m68k-aout ;;
  m68*-*-sunos*)	bfd_target=m68k-aout ;;
  m68*-*-sysv*)		bfd_target=m68k-coff ;;
  m68*-*-vxworks*)	bfd_target=m68k-aout ;;
  m68*-ericsson-*)	bfd_target=m68k-aout ;;
  m68*-netx-*)		bfd_target=m68k-aout ;;
  m88k-*-*)		bfd_target=m88k-coff ;;
  mips-big-*)		bfd_target=bigmips ;;
  mips-dec-bsd*)        bfd_target=mipsdecbsd ;;
  mips-dec-*)		bfd_target=decstation ;;
  mips-*-ecoffl*)	bfd_target=decstation ;;
  mips-*-ecoff*)	bfd_target=bigmips ;;
  mips-sgi-*)		bfd_target=bigmips ;;
  mips-*-sysv*)		bfd_target=riscos ;;
  mips-*-riscos*)	bfd_target=riscos ;;
  mips-*-bsd*)		bfd_target=noop ;;
  rs6000-*-*)		bfd_target=rs6000 ;;
  sparc-*-solaris2*)	bfd_target=sparc-elf ;;
  sparc-*-sysv4*)	bfd_target=sparc-elf ;;
#	start-sanitize-v9
# Don't set target64=true for sparc64-*-aout*.  Keep it using the 32bit stuff
# so we continue to have something that works (until the 64 bit support is
# rock solid).
  sparc64-*-aout*)	bfd_target=sparc-aout ;;
  sparc64-*-elf*)	bfd_target=sparc64-elf  ; target64=true ;;
#	end-sanitize-v9
  sparc*-*-*)		bfd_target=sparc-aout ;;
  tahoe-*-*)		bfd_target=tahoe ;;
  vax-*-vms)		bfd_target=vax-vms ;;
  vax-*-*)		bfd_target=vax ;;
  we32k-*-*)		bfd_target=we32k ;;
  z8k*-*-*)		bfd_target=z8k-coff ;;

  *-*-aout)		bfd_target=${target_cpu}-aout ;;
  *-*-bsd*)		bfd_target=${target_cpu}-aout ;;
  *-*-netware*)		bfd_target=${target_cpu}-nlm ;;
  *-*-sysv4*)		bfd_target=${target_cpu}-elf ;;
  *-*-solaris2*)	bfd_target=${target_cpu}-elf ;;
  *-*-go32)		bfd_target=${target_cpu}-aout ;;
  *-*-sysv*)		bfd_target=${target_cpu}-coff ;;

  *-*-aout64)		bfd_target=${target_cpu}-aout64 ; target64=true ;;
  *-*-elf64)		bfd_target=${target_cpu}-elf64 ; target64=true ;;

  *-adobe-*)		bfd_target=adobe ;;
  *-sony-*)		bfd_target=news ;;
  *-intel-*)		bfd_target=${target_cpu}-coff ;;
  *-stratus-*)		bfd_target=${target_cpu}-elf ;;
  *-cbm-*)		bfd_target=${target_cpu}-elf ;;
  *-ncr-*)		bfd_target=${target_cpu}-elf ;;
  *-tandem-*)		bfd_target=st2000 ;;
esac

[ -z "$bfd_target" ] && bfd_target="$target" # For error message.

all_targets=false
for targ in $bfd_target `echo $with_bfd_targets | sed 's/,/ /g'`
do
    if [ "x$targ" = "xall" ]; then
        all_targets=true
    else
	if [ ! -f ${srcdir}/config/${targ}.mt ] ; then
	    if [ -n "${targ}" ] ; then
		echo '***' No file ${srcdir}/config/${targ}.mt 1>&2
	    fi
	    echo '***' BFD does not support target ${targ} 1>&2
	    echo '***' Look in bfd/configure.in for supported targets 1>&2
	    exit 1
	fi

	if [ "x$bfd_target" = "x$targ" ]; then
	    target_makefile_frag=${srcdir}/config/${targ}.mt
	else
	    target_extra_frags="$target_extra_frags ${srcdir}/config/${targ}.mt"
	fi
    fi
done

# We don't do any links based on the target system, just minor makefile
# config.

# post-target:

rm -f Makefile.tmp Makefile.2
mv Makefile Makefile.tmp

case ${with_64_bit_bfd} in
  yes)		want64=true  ;;
  no | "")	want64=false ;;
  *)
    echo "*** bad value \"${with_64_bit_bfd}\" for 64-bit-bfd flag; ignored" 1>&2
    ;;
esac

case ${host64}-${target64}-${want64} in
  *true*)
    echo WORDSIZE=64 >> Makefile.2
    echo 'ALL_BACKENDS = $(BFD64_BACKENDS) $(BFD32_BACKENDS)' >> Makefile.2
    ;;
  false-false-false)
    echo WORDSIZE=32 >> Makefile.2
    echo 'ALL_BACKENDS = $(BFD32_BACKENDS)' >> Makefile.2
    ;;
esac

# The default vector in the primary target.
DEFAULT_VECTOR=`sed -n '
s/DEFAULT_VECTOR[ 	]*=[ 	]*\([^ 	]*\)/\1/p
' $target_makefile_frag`

if [ x${all_targets} = xfalse ]; then

    allfrags="$target_makefile_frag $target_extra_frags"

    # The default and selected vectors in all the configured targets.
    SELECT_VECS=`sed -n '
    s/DEFAULT_VECTOR[ 	]*=[ 	]*\([^ 	]*\)/\1/p
    s/SELECT_VECS[ 	]*=[ 	]*\([^ 	]*\)/\1/p
    ' $allfrags`
    # uniq the list.
    f=""
    for i in $SELECT_VECS ; do
	case " $f " in
	*" $i "*) ;;
	*) f="$f $i" ;;
	esac
    done
    SELECT_VECS="$f"

    # The architectures in all the configured targets.
    SELECT_ARCHITECTURES=`sed -n '
    s/SELECT_ARCHITECTURES[ 	]*=[ 	]*//p
    ' $allfrags`
    # uniq the list.
    f=""
    for i in $SELECT_ARCHITECTURES ; do
	case " $f " in
	*" $i "*) ;;
	*) f="$f $i" ;;
	esac
    done
    SELECT_ARCHITECTURES="$f"

    # Target backend .o files.
    tb=

    for vec in $SELECT_VECS
    do
	case "$vec" in
	a29kcoff_big_vec)	tb="$tb coff-a29k.o" ;;
	a_out_adobe_vec)	tb="$tb aout-adobe.o aout32.o stab-syms.o" ;;
	aout_mips_little_vec)	tb="$tb mipsbsd.o aout32.o stab-syms.o" ;;
	b_out_vec_big_host)	tb="$tb bout.o aout32.o stab-syms.o" ;;
	b_out_vec_little_host)	tb="$tb bout.o aout32.o stab-syms.o" ;;
	bfd_elf32_hppa_vec)	tb="$tb elf32-hppa.o elf32.o elf.o" ;;
	bfd_elf32_i386_vec)	tb="$tb elf32-i386.o elf32.o elf.o" ;;
	bfd_elf32_i860_vec)	tb="$tb elf32-i860.o elf32.o elf.o" ;;
	bfd_elf32_m68k_vec)	tb="$tb elf32-m68k.o elf32.o elf.o" ;;
	bfd_elf32_sparc_vec)	tb="$tb elf32-sparc.o elf32.o elf.o" ;;
#	start-sanitize-v9
	bfd_elf64_sparc_vec)	tb="$tb elf64-sparc.o elf64.o elf.o" ;;
#	end-sanitize-v9
	bfd_nlm32_i386_vec)	tb="$tb nlm32-i386.o" ;;
	ecoff_big_vec)		tb="$tb coff-mips.o" ;;
	ecoff_little_vec)	tb="$tb coff-mips.o" ;;
	ecoffalpha_little_vec)	tb="$tb coff-alpha.o" ;;
	h8300coff_vec)		tb="$tb coff-h8300.o" ;;
	h8500coff_vec)		tb="$tb coff-h8500.o" ;;
	host_aout_vec)		tb="$tb host-aout.o aout32.o stab-syms.o" ;;
	hp300bsd_vec)		tb="$tb hp300bsd.o aout32.o stab-syms.o" ;;
	hp300hpux_vec)		tb="$tb hp300hpux.o aout32.o stab-syms.o" ;;
	hppa_vec)		tb="$tb hppa.o" ;;
	i386aout_vec)		tb="$tb i386aout.o aout32.o stab-syms.o" ;;
	i386bsd_vec)		tb="$tb i386bsd.o aout32.o stab-syms.o" ;;
	i386coff_vec)		tb="$tb coff-i386.o" ;;
	i386linux_vec)		tb="$tb i386linux.o aout32.o stab-syms.o" ;;
	i386lynx_vec)		tb="$tb i386lynx.o aout32.o stab-syms.o" ;;
	icoff_big_vec)		tb="$tb coff-i960.o" ;;
	icoff_little_vec)	tb="$tb coff-i960.o" ;;
	ieee_vec)		tb="$tb ieee.o" ;;
	m68kcoff_vec)		tb="$tb coff-m68k.o" ;;
	m68kcoffun_vec)		tb="$tb coff-u68k.o coff-m68k.o" ;;
	m88kbcs_vec)		tb="$tb coff-m88k.o" ;;
	newsos3_vec)		tb="$tb newsos3.o aout32.o stab-syms.o" ;;
	rs6000coff_vec)		tb="$tb coff-rs6000.o" ;;
	shcoff_vec)		tb="$tb coff-sh.o" ;;
	srec_vec)		tb="$tb srec.o" ;;
	sunos_big_vec)		tb="$tb sunos.o aout32.o stab-syms.o" ;;
	symbolsrec_vec)		tb="$tb srec.o" ;;
	we32kcoff_vec)		tb="$tb coff-we32k.o" ;;
	z8kcoff_vec)		tb="$tb coff-z8k.o" ;;

	"")			;;
	*) echo "*** unknown target vector $vec in $f" 1>&2; exit 1 ;;
	esac
    done

    # Target architecture .o files.
    ta=`echo $SELECT_ARCHITECTURES | sed -e s/bfd_/cpu-/g -e s/_arch/.o/g`

    # Weed out duplicate .o files.
    f=""
    for i in $tb ; do
	case " $f " in
	*" $i "*) ;;
	*) f="$f $i" ;;
	esac
    done
    tb="$f"

    f=""
    for i in $ta ; do
	case " $f " in
	*" $i "*) ;;
	*) f="$f $i" ;;
	esac
    done
    ta="$f"

    echo "BFD_BACKENDS = $tb" >> Makefile.2
    echo "BFD_MACHINES = $ta" >> Makefile.2

    # Only set these if they will be nonempty, for the clever echo.
    test -n "$SELECT_VECS" &&
      selvecs=`echo $SELECT_VECS | sed -e 's/^/\&/' -e 's/ \(.\)/,\&\1/g'`
    test -n "SELECT_ARCHITECTURES" &&
      selarchs=`echo $SELECT_ARCHITECTURES | sed -e 's/ \(.\)/,\1/g'`

else	# all_targets is true
    echo 'BFD_BACKENDS = $(ALL_BACKENDS)' >> Makefile.2
    echo 'BFD_MACHINES = $(ALL_MACHINES)' >> Makefile.2
fi	# all_targets is true

test -n "$DEFAULT_VECTOR" && defvec="$DEFAULT_VECTOR"

echo "TDEFAULTS = \
${defvec+-DDEFAULT_VECTOR=$defvec} \
${selvecs+-DSELECT_VECS='$selvecs'} \
${selarchs+-DSELECT_ARCHITECTURES='$selarchs'}" \
  >> Makefile.2

cat Makefile.tmp >> Makefile.2
rm -f Makefile.tmp
mv Makefile.2 Makefile
