AC_PREREQ(2.3)
AC_INIT(libbfd.c)

AC_ARG_ENABLE(64-bit-bfd,
[  --enable-64-bit-bfd     64-bit support (on hosts with narrower word sizes)],
[case "${enableval}" in
  yes)  want64=true  ;;
  no)   want64=false ;;
  *)    AC_MSG_ERROR(bad value ${enableval} for 64-bit-bfd option) ;;
esac],[want64=false])dnl
AC_ARG_ENABLE(targets,
[  --enable-targets        alternative target configurations],
[case "${enableval}" in
  yes | "") AC_ERROR(enable-targets option must specify target names or 'all')
            ;;
  no)       enable_targets= ;;
  *)        enable_targets=$enableval ;;
esac])dnl

AC_CONFIG_AUX_DIR(`cd $srcdir/..;pwd`)
AC_CANONICAL_SYSTEM
if test -z "$target" ; then
    AC_MSG_ERROR(Unrecognized target system type; please check config.sub.)
fi
AC_ARG_PROGRAM

host64=false
target64=false

# host stuff:

. ${srcdir}/configure.host

AC_PROG_RANLIB

# Set up to make a link between the host's include file and "sysdep.h".
files=hosts/${my_host}.h

if test ! -f ${srcdir}/${files} ; then
	files=../bfd/hosts/std-host.h
	AC_MSG_WARN(BFD has no specific support for host ${host} -- using std-host)
fi

AC_LINK_FILES($files, sysdep.h)

if test -f ${srcdir}/config/${my_host}.mh ; then
	host_makefile_frag=$srcdir/config/${my_host}.mh
else
	host_makefile_frag=/dev/null
fi
AC_SUBST_FILE(host_makefile_frag)
frags=
if test $host_makefile_frag != /dev/null ; then
    frags="$host_makefile_frag"
fi
AC_SUBST(frags)

# If we are configured native, pick a core file support file.
COREFILE=
COREFLAG=
if test "${target}" = "${host}"; then
  case "${host}" in
  alpha-*-*)		COREFILE=osf-core.o ;;
  arm-*-riscix)		COREFILE=trad-core.o ;;
  hppa*-*-hpux*)	COREFILE=hpux-core.o ;;
  hppa*-*-hiux*)	COREFILE=hpux-core.o ;;
  hppa*-*-bsd*)		COREFILE="hpux-core.o hppabsd-core.o"
			COREFLAG="-DHPUX_CORE -DHPPABSD_CORE" ;;
changequote(,)dnl
  i[345]86-sequent-bsd*) COREFILE=trad-core.o ;;
  i[345]86-sequent-sysv4*) ;;
  i[345]86-sequent-sysv*) COREFILE=trad-core.o ;;
  i[345]86-*-bsd*)	COREFILE=trad-core.o ;;
  i[345]86-*-freebsd*)	COREFILE=trad-core.o ;;
  i[345]86-*-netbsd*)	COREFILE=trad-core.o ;;
  i[345]86-esix-sysv3*)	COREFILE=trad-core.o ;;
  i[345]86-*-sco*)	COREFILE=trad-core.o ;;
  i[345]86-*-mach3*)	COREFILE=trad-core.o ;;
  i[345]86-*-linux*)	COREFILE=trad-core.o ;;
  i[345]86-*-isc*)	COREFILE=trad-core.o ;;
  i[345]86-*-aix*)	COREFILE=aix386-core.o ;;
changequote([,])dnl
  mips-dec-bsd*)	COREFILE=trad-core.o ;;
  mips-dec-mach3*)	COREFILE=trad-core.o ;;
  mips-dec-*)		COREFILE=trad-core.o ;;
  mips-sgi-irix4*)	COREFILE=irix-core.o ;;
  mips-sgi-irix5*)	COREFILE=irix-core.o ;;
  mips-*-mach3*)	COREFILE=trad-core.o ;;
  mips-*-sysv4*)	;;
  mips-*-sysv*)		COREFILE=trad-core.o ;;
  mips-*-riscos*)	COREFILE=trad-core.o ;;
  mips-sony-bsd*)	COREFILE=trad-core.o ;;
  m68*-bull*-sysv*)	COREFILE=trad-core.o ;;
  m68*-hp-hpux*)	COREFILE=hpux-core.o ;;
  m68*-hp-bsd*)		COREFILE=trad-core.o ;;
  m68*-motorola-sysv*)	COREFILE=ptrace-core.o ;;
  m68*-sony-*)		COREFILE=trad-core.o ;;
  m88*-*-sysv4*)	;;
  m88*-motorola-sysv*)	COREFILE=trad-core.o ;;
  m88*-*-mach3*)	COREFILE=trad-core.o ;;
  ns32k-pc532-mach)	COREFILE=trad-core.o ;;
  rs6000-*-lynx*)	COREFILE=lynx-core.o ;;
  rs6000-*-aix4*)	COREFILE=rs6000-core.o
			COREFLAG=-DALTERNATE_AIX_CORE_FORMAT ;;
  rs6000-*-*)		COREFILE=rs6000-core.o ;;
  powerpc-*-aix4*)	COREFILE=rs6000-core.o
			COREFLAG=-DALTERNATE_AIX_CORE_FORMAT ;;
  powerpc-*-aix*)	COREFILE=rs6000-core.o ;;
  tahoe-*-*)		COREFILE=trad-core.o ;;
  vax-*-ultrix2*)	COREFILE=trad-core.o ;;
  vax-*-ultrix*)	COREFILE=trad-core.o ;;
  vax-*-*)		COREFILE=trad-core.o ;;
  esac

  case "$COREFILE" in
  aix386-core.o)	COREFLAG=-DAIX386_CORE ;;
  hppabsd-core.o)	COREFLAG=-DHPPABSD_CORE ;;
  hpux-core.o)		COREFLAG=-DHPUX_CORE ;;
  irix-core.o)		COREFLAG=-DIRIX_CORE ;;
  lynx-core.o)		COREFLAG=-DLYNX_CORE ;;
  osf-core.o)		COREFLAG=-DOSF_CORE ;;
  ptrace-core.o)	COREFLAG=-DPTRACE_CORE ;;
  rs6000-core.o)	COREFLAG="$COREFLAG -DAIX_CORE" ;;
  trad-core.o)		COREFLAG=-DTRAD_CORE ;;
  esac
fi
AC_SUBST(COREFILE)
AC_SUBST(COREFLAG)

# target stuff:

# Canonicalize the secondary target names.
if test -n "$enable_targets" ; then
    for targ in `echo $enable_targets | sed 's/,/ /g'`
    do
	result=`$ac_config_sub $targ 2>/dev/null`
	if test -n "$result" ; then
	    canon_targets="$canon_targets $result"
	else
	    # Allow targets that config.sub doesn't recognize, like "all".
	    canon_targets="$canon_targets $targ"
	fi
    done
fi

all_targets=false
defvec=
selvecs=
selarchs=
TDEFINES=
for targ in $target $canon_targets
do
    if test "x$targ" = "xall"; then
        all_targets=true
    else
	. $srcdir/config.bfd
	if test "x$targ" = "x$target"; then
	    defvec=$targ_defvec
	fi
	selvecs="$selvecs $targ_defvec $targ_selvecs"
	selarchs="$selarchs $targ_archs"
	TDEFINES="$TDEFINES $targ_cflags"
    fi
done
AC_SUBST(TDEFINES)

# This processing still needs to be done if we're to decide properly whether
# 64-bit support needs to be compiled in.  Currently, it will be included if
# the default or any other explicitly requested target requires it; it
# will not be included on a 32-bit host if no 64-bit target is requested, and
# no "--with-64-bit-bfd" option is given, even if "--with-targets=all" is
# used.

# uniq the default and selected vectors in all the configured targets.
f=""
for i in $selvecs ; do
    case " $f " in
    *" $i "*) ;;
    *) f="$f $i" ;;
    esac
done
selvecs="$f"

# uniq the architectures in all the configured targets.
f=""
for i in $selarchs ; do
    case " $f " in
    *" $i "*) ;;
    *) f="$f $i" ;;
    esac
done
selarchs="$f"

# Target backend .o files.
tb=

elf="elf.o elflink.o"

for vec in $selvecs
do
    case "$vec" in
    # This list is alphabetized to make it easy to compare
    # with the two vector lists in targets.c.
    a29kcoff_big_vec)		tb="$tb coff-a29k.o cofflink.o" ;;
    a_out_adobe_vec)		tb="$tb aout-adobe.o aout32.o stab-syms.o" ;;
    armpe_little_vec)		tb="$tb pe-arm.o cofflink.o " ;;
    armpe_big_vec)		tb="$tb pe-arm.o cofflink.o " ;;
    armpei_little_vec)		tb="$tb pei-arm.o cofflink.o " ;;
    armpei_big_vec)		tb="$tb pei-arm.o cofflink.o " ;;
    aout0_big_vec)		tb="$tb aout0.o aout32.o stab-syms.o" ;;
    aout_arm_big_vec)		tb="$tb aout-arm.o aout32.o stab-syms.o" ;;
    aout_arm_little_vec)	tb="$tb aout-arm.o aout32.o stab-syms.o" ;;
    aout_mips_big_vec)		tb="$tb mipsbsd.o aout32.o stab-syms.o" ;;
    aout_mips_little_vec)	tb="$tb mipsbsd.o aout32.o stab-syms.o" ;;
    apollocoff_vec)		tb="$tb coff-apollo.o" ;;
    b_out_vec_big_host)		tb="$tb bout.o aout32.o stab-syms.o" ;;
    b_out_vec_little_host)	tb="$tb bout.o aout32.o stab-syms.o" ;;
# start-sanitize-arc
    bfd_elf32_littlearc_vec)	tb="$tb elf32-arc.o elf32.o $elf" ;;
    bfd_elf32_bigarc_vec)	tb="$tb elf32-arc.o elf32.o $elf" ;;
# end-sanitize-arc
    bfd_elf32_big_generic_vec) 	tb="$tb elf32-gen.o elf32.o $elf" ;;
    bfd_elf32_bigmips_vec) 	tb="$tb elf32-mips.o elf32.o $elf ecofflink.o" ;;
    bfd_elf32_hppa_vec)		tb="$tb elf32-hppa.o elf32.o $elf" ;;
    bfd_elf32_i386_vec)		tb="$tb elf32-i386.o elf32.o $elf" ;;
    bfd_elf32_i860_vec)		tb="$tb elf32-i860.o elf32.o $elf" ;;
    bfd_elf32_little_generic_vec) tb="$tb elf32-gen.o elf32.o $elf" ;;
    bfd_elf32_littlemips_vec) 	tb="$tb elf32-mips.o elf32.o $elf ecofflink.o" ;;
    bfd_elf32_m68k_vec)		tb="$tb elf32-m68k.o elf32.o $elf" ;;
    bfd_elf32_m88k_vec)		tb="$tb elf32-m88k.o elf32.o $elf" ;;
    bfd_elf32_powerpc_vec)	tb="$tb elf32-ppc.o elf32.o $elf" ;;
    bfd_elf32_powerpcle_vec)	tb="$tb elf32-ppc.o elf32.o $elf" ;;
    bfd_elf32_sparc_vec)	tb="$tb elf32-sparc.o elf32.o $elf" ;;
    bfd_elf64_big_generic_vec) 	tb="$tb elf64-gen.o elf64.o $elf"
				target64=true ;;
    bfd_elf64_little_generic_vec) tb="$tb elf64-gen.o elf64.o $elf"
				target64=true ;;
    bfd_elf64_sparc_vec)	tb="$tb elf64-sparc.o elf64.o $elf"
				target64=true ;;
    cisco_core_vec)		tb="$tb cisco-core.o" ;;
    demo_64_vec)		tb="$tb demo64.o aout64.o stab-syms.o"
				target64=true ;;
    ecoff_big_vec)		tb="$tb coff-mips.o ecoff.o ecofflink.o" ;;
    ecoff_little_vec)		tb="$tb coff-mips.o ecoff.o ecofflink.o" ;;
    ecoffalpha_little_vec)	tb="$tb coff-alpha.o ecoff.o ecofflink.o"
				target64=true ;;
    h8300coff_vec)		tb="$tb coff-h8300.o reloc16.o" ;;
    h8500coff_vec)		tb="$tb coff-h8500.o reloc16.o" ;;
    host_aout_vec)		tb="$tb host-aout.o aout32.o stab-syms.o" ;;
    hp300bsd_vec)		tb="$tb hp300bsd.o aout32.o stab-syms.o" ;;
    hp300hpux_vec)		tb="$tb hp300hpux.o aout32.o stab-syms.o" ;;
    i386aout_vec)		tb="$tb i386aout.o aout32.o stab-syms.o" ;;
    i386bsd_vec)		tb="$tb i386bsd.o aout32.o stab-syms.o" ;;
    i386dynix_vec)		tb="$tb i386dynix.o aout32.o stab-syms.o" ;;
    i386coff_vec)		tb="$tb coff-i386.o cofflink.o" ;;
    i386msdos_vec)		tb="$tb i386msdos.o" ;;
    i386pe_vec)			tb="$tb pe-i386.o cofflink.o " ;;
    i386pei_vec)		tb="$tb pei-i386.o cofflink.o" ;;
    i386linux_vec)		tb="$tb i386linux.o aout32.o stab-syms.o" ;;
    i386lynx_aout_vec)		tb="$tb i386lynx.o lynx-core.o aout32.o stab-syms.o" ;;
    i386lynx_coff_vec)		tb="$tb cf-i386lynx.o cofflink.o lynx-core.o stab-syms.o" ;;
    i386mach3_vec)		tb="$tb i386mach3.o aout32.o stab-syms.o" ;;
    i386netbsd_vec)		tb="$tb i386netbsd.o aout32.o stab-syms.o" ;;
    i386os9k_vec)		tb="$tb i386os9k.o aout32.o stab-syms.o" ;;
    icoff_big_vec)		tb="$tb coff-i960.o" ;;
    icoff_little_vec)		tb="$tb coff-i960.o" ;;
    ieee_vec)			tb="$tb ieee.o" ;;
    m68kcoff_vec)		tb="$tb coff-m68k.o cofflink.o" ;;
    m68kcoffun_vec)		tb="$tb coff-u68k.o coff-m68k.o cofflink.o" ;;
    m68klynx_aout_vec)		tb="$tb m68klynx.o lynx-core.o aout32.o stab-syms.o" ;;
    m68klynx_coff_vec)		tb="$tb cf-m68klynx.o coff-m68k.o cofflink.o lynx-core.o stab-syms.o" ;;
    m68knetbsd_vec)		tb="$tb m68knetbsd.o aout32.o stab-syms.o" ;;
    m88kbcs_vec)		tb="$tb coff-m88k.o" ;;
    newsos3_vec)		tb="$tb newsos3.o aout32.o stab-syms.o" ;;
    nlm32_i386_vec)		tb="$tb nlm32-i386.o nlm32.o nlm.o" ;;
    nlm32_sparc_vec)		tb="$tb nlm32-sparc.o nlm32.o nlm.o" ;;
    nlm32_alpha_vec)		tb="$tb nlm32-alpha.o nlm32.o nlm.o"
				target64=true ;;
    riscix_vec)			tb="$tb aout32.o riscix.o stab-syms.o" ;;
    nlm32_powerpc_vec)		tb="$tb nlm32-ppc.o nlm32.o nlm.o" ;;
    pc532netbsd_vec)		tb="$tb ns32knetbsd.o aout-ns32k.o stab-syms.o" ;;
    pc532machaout_vec)		tb="$tb pc532-mach.o aout-ns32k.o stab-syms.o" ;;
    rs6000coff_vec)		tb="$tb coff-rs6000.o" ;;
    shcoff_vec)			tb="$tb coff-sh.o cofflink.o" ;;
# start-sanitize-rce
    rce_aout_vec)		tb="$tb aout-rce.o aout32.o stab-syms.o" ;;
# end-sanitize-rce
    shlcoff_vec)		tb="$tb coff-sh.o cofflink.o" ;;
    som_vec)			tb="$tb som.o" ;;
    sparclynx_aout_vec)		tb="$tb sparclynx.o lynx-core.o aout32.o stab-syms.o" ;;
    sparclynx_coff_vec)		tb="$tb cf-sparclynx.o lynx-core.o stab-syms.o" ;;
    sparcnetbsd_vec)		tb="$tb sparcnetbsd.o aout32.o stab-syms.o" ;;
    sparccoff_vec)		tb="$tb coff-sparc.o" ;;
    srec_vec)			tb="$tb srec.o" ;;
    sunos_big_vec)		tb="$tb sunos.o aout32.o stab-syms.o" ;;
    symbolsrec_vec)		tb="$tb srec.o" ;;
    tekhex_vec)			tb="$tb tekhex.o" ;;
    we32kcoff_vec)		tb="$tb coff-we32k.o" ;;
    z8kcoff_vec)		tb="$tb coff-z8k.o reloc16.o" ;;
    w65_vec)			tb="$tb coff-w65.o reloc16.o" ;;
    versados_vec)		tb="$tb versados.o" ;;

    "")			;;
    *) AC_MSG_ERROR(*** unknown target vector $vec) ;;
    esac
done

# Target architecture .o files.
ta=`echo $selarchs | sed -e s/bfd_/cpu-/g -e s/_arch/.o/g`

# Weed out duplicate .o files.
f=""
for i in $tb ; do
    case " $f " in
    *" $i "*) ;;
    *) f="$f $i" ;;
    esac
done
tb="$f"

f=""
for i in $ta ; do
    case " $f " in
    *" $i "*) ;;
    *) f="$f $i" ;;
    esac
done
ta="$f"

bfd_backends="$tb"
bfd_machines="$ta"

if test x${all_targets} = xtrue ; then
  bfd_backends="${bfd_backends}"' $(ALL_BACKENDS)'
  bfd_machines="${bfd_machines}"' $(ALL_MACHINES)'
  selvecs=
  selarchs=
else	# all_targets is true
  # Only set these if they will be nonempty, for the clever echo.
  test -n "$selvecs" &&
    selvecs=`echo $selvecs | sed -e 's/^/\&/' -e 's/ \(.\)/,\&\1/g'`
  test -n "$selarchs" &&
    selarchs=`echo $selarchs | sed -e 's/ \(.\)/,\1/g'`
fi	# all_targets is true

case ${host64}-${target64}-${want64} in
  *true*)
    wordsize=64
    all_backends='$(BFD64_BACKENDS) $(BFD32_BACKENDS)'
    ;;
  false-false-false)
    wordsize=32
    all_backends='$(BFD32_BACKENDS)'
    ;;
esac

AC_SUBST(wordsize)
AC_SUBST(all_backends)
AC_SUBST(bfd_backends)
AC_SUBST(bfd_machines)

tdefaults=""
test -n "${defvec}" && tdefaults="${tdefaults} -DDEFAULT_VECTOR=${defvec}"
test -n "${selvecs}" && tdefaults="${tdefaults} -DSELECT_VECS='${selvecs}'"
test -n "${selarchs}" && tdefaults="${tdefaults} -DSELECT_ARCHITECTURES='${selarchs}'"
AC_SUBST(tdefaults)

rm -f doc/config.status
AC_OUTPUT(Makefile doc/Makefile)
