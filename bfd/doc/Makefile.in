srcdir = .

ddestdir = /usr/local
idestdir = $(ddestdir)

SHELL = /bin/sh

MAKEINFO = makeinfo

.SUFFIXES: .texi .o .c .h .p .ip

.c.p:
	$(srcdir)/scanph $< $@

.h.p:
	$(srcdir)/scanph $< $@

.c.ip:
	$(srcdir)/scanph -i $< $@

# main GDB source directory

DOCFILES = aoutx.texi  archive.texi archures.texi \
	bfd.texi  cache.texi coffcode.texi \
	core.texi  format.texi  libbfd.texi  \
	opncls.texi  reloc.texi  section.texi  \
	syms.texi  targets.texi init.texi ctor.texi

PROTOS = archive.p archures.p bfd.p \
	coffcode.p core.p format.p \
	libbfd.p opncls.p reloc.p \
	section.p syms.p targets.p  \
	format.p coffcode.p core.p machines.p init.p

IPROTOS = cache.ip libbfd.ip reloc.ip init.ip archures.ip ctor.ip 

# SRCDOC, SRCPROT, SRCIPROT only used to sidestep Sun Make bug in interaction 
# between VPATH and suffix rules.  If you use GNU Make, perhaps other Makes,
# you don't need these three:
SRCDOC = $(srcdir)/../aoutx.h  $(srcdir)/../archive.c \
	$(srcdir)/../archures.c $(srcdir)/../bfd.c \
	$(srcdir)/../cache.c $(srcdir)/../coffcode.h \
	$(srcdir)/../core.c  $(srcdir)/../format.c \
	$(srcdir)/../libbfd.c $(srcdir)/../opncls.c \
	$(srcdir)/../reloc.c  $(srcdir)/../section.c \
	$(srcdir)/../syms.c  $(srcdir)/../targets.c \
	$(srcdir)/../init.c

SRCPROT = $(srcdir)/../archive.c $(srcdir)/../archures.c \
	$(srcdir)/../bfd.c $(srcdir)/../coffcode.h $(srcdir)/../core.c \
	$(srcdir)/../format.c $(srcdir)/../libbfd.c \
	$(srcdir)/../opncls.c $(srcdir)/../reloc.c \
	$(srcdir)/../section.c $(srcdir)/../syms.c \
	$(srcdir)/../targets.c $(srcdir)/../init.c    

SRCIPROT = $(srcdir)/../cache.c $(srcdir)/../libbfd.c \
	$(srcdir)/../reloc.c $(srcdir)/../cpu-h8300.c \
	$(srcdir)/../cpu-i960.c $(srcdir)/../archures.c \
	$(srcdir)/../init.c $(srcdir)/../ctor.c

STAGESTUFF = $(PROTOS) *.p *.ip *.h bfd.?? $(DOCFILES)

all install:

all-info: bfd.info

install-info: all-info
	for i in *.info* ; do \
		echo Installing $$i... ; \
		(cp $$i $(idestdir)/info/$$i.new \
			&& mv -f $(idestdir)/info/$$i.new $(idestdir)/info/$$i) \
		|| exit 1 ; \
	done

docs: protos bfd.info bfd.dvi bfd.ps

protos: $(PROTOS) $(IPROTOS)
	sed -f intobfd bfd-in.h  > bfd.h
	sed -f tolibbfd libbfd-in.h  > libbfd.h
	sed -f tolibcoff libcoff-in.h  > libcoff.h

aoutx.texi: $(srcdir)/scanit $(srcdir)/../aoutx.h
	$(srcdir)/scanit $(srcdir)/../aoutx.h aoutx.texi $(srcdir)

archive.texi: $(srcdir)/scanit $(srcdir)/../archive.c
	$(srcdir)/scanit $(srcdir)/../archive.c archive.texi $(srcdir)

archures.texi: $(srcdir)/scanit $(srcdir)/../archures.c
	$(srcdir)/scanit $(srcdir)/../archures.c archures.texi $(srcdir)

bfd.texi: $(srcdir)/scanit $(srcdir)/../bfd.c
	$(srcdir)/scanit $(srcdir)/../bfd.c bfd.texi $(srcdir)

cache.texi:	$(srcdir)/scanit $(srcdir)/../cache.c
	$(srcdir)/scanit $(srcdir)/../cache.c cache.texi $(srcdir)

coffcode.texi:	$(srcdir)/scanit $(srcdir)/../coffcode.h
	$(srcdir)/scanit $(srcdir)/../coffcode.h coffcode.texi $(srcdir)

core.texi:	$(srcdir)/scanit $(srcdir)/../core.c
	$(srcdir)/scanit $(srcdir)/../core.c core.texi $(srcdir)

format.texi:	$(srcdir)/scanit $(srcdir)/../format.c
	$(srcdir)/scanit $(srcdir)/../format.c format.texi $(srcdir)

libbfd.texi:	$(srcdir)/scanit $(srcdir)/../libbfd.c
	$(srcdir)/scanit $(srcdir)/../libbfd.c libbfd.texi $(srcdir)

opncls.texi:	$(srcdir)/scanit $(srcdir)/../opncls.c
	$(srcdir)/scanit $(srcdir)/../opncls.c opncls.texi $(srcdir)

reloc.texi :	$(srcdir)/scanit $(srcdir)/../reloc.c
	$(srcdir)/scanit $(srcdir)/../reloc.c reloc.texi $(srcdir)

section.texi:	$(srcdir)/scanit $(srcdir)/../section.c
	$(srcdir)/scanit $(srcdir)/../section.c section.texi $(srcdir)

syms.texi :	$(srcdir)/scanit $(srcdir)/../syms.c
	$(srcdir)/scanit $(srcdir)/../syms.c syms.texi $(srcdir)

targets.texi:	$(srcdir)/scanit $(srcdir)/../targets.c
	$(srcdir)/scanit $(srcdir)/../targets.c targets.texi $(srcdir)

init.texi:	$(srcdir)/scanit $(srcdir)/../init.c
	$(srcdir)/scanit $(srcdir)/../init.c init.texi $(srcdir)

ctor.texi:	$(srcdir)/scanit $(srcdir)/../ctor.c
	$(srcdir)/scanit $(srcdir)/../ctor.c ctor.texi $(srcdir)

clean:
	rm -f $(STAGESTUFF) bfd.dvi bfd.ps *~* *# bfd.??? 

bfd.info: $(DOCFILES) bfd.texinfo
	$(MAKEINFO) -o bfd.info $(srcdir)/bfd.texinfo

bfd.dvi: $(DOCFILES) bfd.texinfo
	TEXINPUTS=${TEXIDIR}:.:$$TEXINPUTS tex bfd.texinfo
	texindex bfd.??
	TEXINPUTS=${TEXIDIR}:.:$$TEXINPUTS tex bfd.texinfo

bfd.ps: bfd.dvi
	dvips bfd -o
	
quickdoc: $(DOCFILES) bfd.texinfo
	TEXINPUTS=${TEXIDIR}:.:$$TEXINPUTS tex bfd.texinfo

stage1: force
	- mkdir stage1
	- mv -f $(STAGESTUFF) stage1

stage2: force
	- mkdir stage2
	- mv -f $(STAGESTUFF) stage2

stage3: force
	- mkdir stage3
	- mv -f $(STAGESTUFF) stage3

against=stage2

comparison: force
	for i in *.o ; do cmp $$i $(against)/$$i || exit 1 ; done

de-stage1: force
	- (cd stage1 ; mv -f $(STAGESTUFF) ..)
	- rmdir stage1

de-stage2: force
	- (cd stage2 ; mv -f $(STAGESTUFF) ..)
	- rmdir stage2

de-stage3: force
	- (cd stage3 ; mv -f $(STAGESTUFF) ..)
	- rmdir stage3

force:

Makefile: $(srcdir)/Makefile.in $(host_makefile_frag) $(target_makefile_frag)
	$(SHELL) ./config.status

