srcdir = .

ddestdir = /usr/local
idestdir = $(ddestdir)

SHELL = /bin/sh

MAKEINFO = makeinfo

.SUFFIXES: .texi .o .c .h .p .ip
VPATH=..
.c.texi:
	./scanit $< $@

.h.texi:
	./scanit $< $@

.c.p:
	./scanph $< $@

.h.p:
	./scanph $< $@

.c.ip:
	./scanph -i $< $@

# main GDB source directory

DOCFILES = aoutx.texi  archive.texi archures.texi \
	bfd.texi  cache.texi coffcode.texi \
	core.texi  format.texi  libbfd.texi  \
	opncls.texi  reloc.texi  section.texi  \
	syms.texi  targets.texi init.texi ctor.texi
	

PROTOS = archive.p archures.p bfd.p \
	coffcode.p core.p format.p \
	libbfd.p opncls.p reloc.p \
	section.p syms.p targets.p  \
	format.p coffcode.p core.p machines.p init.p

IPROTOS = cache.ip libbfd.ip reloc.ip init.ip archures.ip ctor.ip 

# SRCDOC, SRCPROT, SRCIPROT only used to sidestep Sun Make bug in interaction 
# between VPATH and suffix rules.  If you use GNU Make, perhaps other Makes,
# you don't need these three:
SRCDOC = aoutx.h  archive.c archures.c \
	bfd.c  cache.c coffcode.h \
	core.c  format.c  libbfd.c  \
	opncls.c  reloc.c  section.c  \
	syms.c  targets.c init.c

SRCPROT = archive.c archures.c bfd.c \
	coffcode.h core.c format.c \
	libbfd.c opncls.c reloc.c \
	section.c syms.c targets.c init.c

SRCIPROT = cache.c libbfd.c reloc.c cpu-h8300.c  cpu-i960.c archures.c init.c ctor.c

STAGESTUFF = $(PROTOS) *.p *.ip *.h bfd.?? $(DOCFILES)

all: bfd.info

install: force
	for i in *.info* ; do \
		echo Installing $$i... ; \
		(cp $$i $(idestdir)/info/$$i.new \
			&& mv -f $(idestdir)/info/$$i.new $(idestdir)/info/$$i) \
		|| exit 1 ; \
	done

docs: protos bfd.info bfd.dvi bfd.ps

protos: $(PROTOS) $(IPROTOS)
	sed -f intobfd bfd-in.h  > bfd.h
	sed -f tolibbfd libbfd-in.h  > libbfd.h
	sed -f tolibcoff libcoff-in.h  > libcoff.h

# Following three rules only for the benefit of Sun Make; see comment above
$(DOCFILES) : $(SRCDOC)
$(PROTOS) : $(SRCPROT)
$(IPROTOS) : $(SRCIPROT)

clean:
	rm -f $(STAGESTUFF) bfd.dvi bfd.ps *~* *# bfd.??? 

bfd.info: $(DOCFILES) bfd.texinfo
	$(MAKEINFO) -o bfd.info $(srcdir)/bfd.texinfo

bfd.dvi: $(DOCFILES) bfd.texinfo
	TEXINPUTS=${TEXIDIR}:.:$$TEXINPUTS tex bfd.texinfo
	texindex bfd.??
	TEXINPUTS=${TEXIDIR}:.:$$TEXINPUTS tex bfd.texinfo

bfd.ps: bfd.dvi
	dvips bfd -o
	
quickdoc: $(DOCFILES) bfd.texinfo
	TEXINPUTS=${TEXIDIR}:.:$$TEXINPUTS tex bfd.texinfo

stage1: force
	- mkdir stage1
	- mv -f $(STAGESTUFF) stage1

stage2: force
	- mkdir stage2
	- mv -f $(STAGESTUFF) stage2

stage3: force
	- mkdir stage3
	- mv -f $(STAGESTUFF) stage3

against=stage2

comparison: force
	for i in *.o ; do cmp $$i $(against)/$$i || exit 1 ; done

de-stage1: force
	- (cd stage1 ; mv -f $(STAGESTUFF) ..)
	- rmdir stage1

de-stage2: force
	- (cd stage2 ; mv -f $(STAGESTUFF) ..)
	- rmdir stage2

de-stage3: force
	- (cd stage3 ; mv -f $(STAGESTUFF) ..)
	- rmdir stage3

force:

Makefile: $(srcdir)/Makefile.in $(host_makefile_frag) $(target_makefile_frag)
	$(SHELL) ./config.status

