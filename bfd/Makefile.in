#    Makefile template for Configure for the BFD library.
#    Copyright (C) 1990, 1991, 1992, 1993 Free Software Foundation, Inc.
#    Written by Cygnus Support.
# 
# This file is part of BFD, the Binary File Descriptor library.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

srcdir = .

prefix = /usr/local

exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib

datadir = $(prefix)/lib
mandir = $(prefix)/man
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9
infodir = $(prefix)/info
includedir = $(prefix)/include
oldincludedir =
docdir = doc

SHELL = /bin/sh

INSTALL = install -c
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL)

AR = ar
AR_FLAGS = rc
CFLAGS = -g
BISON = bison
MAKEINFO = makeinfo
RANLIB = ranlib

CC_FOR_BUILD = $(CC)

INCDIR = $(srcdir)/../include
CSEARCH = -I. -I$(srcdir) -I$(INCDIR)
DEP = mkdep

SUBDIRS = doc


TARGETLIB = libbfd.a

# bfd.h goes here, for now
BFD_H = bfd.h

# Some of these files should be in BFD*_BACKENDS below, but some programs
# won't link without them.  So, in order for some of the minimal-bfd
# hacks to work, they're also included here for now.
#	gdb: ecoff.o elf.o
#	objdump: elf.o
#
# Also, Jim Kingdon notes:
# Writing S-records should be included in all (or at least most)
# *-*-coff, *-*-aout, etc., configurations, because people will want to
# be able to use objcopy to create S-records.  (S-records are not useful
# for the debugger, so if you are downloading things as S-records you
# need two copies of the executable, one to download and one for the
# debugger).
BFD_LIBS = \
	archive.o archures.o bfd.o cache.o coffgen.o core.o ctor.o \
	format.o init.o libbfd.o opncls.o reloc.o \
	seclet.o section.o syms.o targets.o \
	ecoff.o elf.o srec.o

# This list is alphabetized to make it easier to keep in sync
# with the decls and initializer in archures.c.
ALL_MACHINES = \
	cpu-a29k.o \
	cpu-alpha.o \
	cpu-h8300.o \
	cpu-h8500.o \
	cpu-hppa.o \
	cpu-i386.o \
	cpu-i960.o \
	cpu-m68k.o \
	cpu-m88k.o \
	cpu-mips.o \
	cpu-rs6000.o \
	cpu-sh.o \
	cpu-sparc.o \
	cpu-vax.o \
	cpu-we32k.o \
	cpu-z8k.o

# The .o files needed by all of the 32 bit vectors that are configured into
# target_vector in targets.c if configured with --with-targets=all.
BFD32_BACKENDS = \
	aout-adobe.o \
	aout32.o \
	bout.o \
	coff-a29k.o \
	coff-h8300.o \
	coff-h8500.o \
	coff-i386.o \
	coff-i960.o \
	coff-m68k.o \
	coff-m88k.o \
	coff-mips.o \
	coff-rs6000.o \
	coff-sh.o \
	coff-u68k.o \
	coff-we32k.o \
	coff-z8k.o \
	elf32-gen.o \
	elf32-hppa.o \
	elf32-i386.o \
	elf32-i860.o \
	elf32-m68k.o \
	elf32-m88k.o \
	elf32-mips.o \
	elf32-sparc.o \
	elf32.o \
	hp300hpux.o \
	som.o \
	i386aout.o \
	i386bsd.o \
	i386linux.o \
	i386lynx.o \
	i386lynx-cf.o \
	netbsd386.o \
	i386mach3.o \
	ieee.o \
	m68klynx.o \
	m68klynx-cf.o \
	mipsbsd.o \
	newsos3.o \
	nlm.o \
	nlm32-gen.o \
	nlm32-i386.o \
	nlm32.o \
	oasys.o \
	reloc16.o \
	stab-syms.o \
	sunos.o

# The .o files needed by all of the 64 bit vectors that are configured into
# target_vector in targets.c if configured with --with-targets=all
# and --with-64-bit-bfd.
BFD64_BACKENDS = \
	aout64.o \
	coff-alpha.o \
	demo64.o \
	elf64-gen.o \
	elf64.o \
	nlm64-gen.o \
	nlm64.o

OPTIONAL_BACKENDS = \
	aix386-core.o \
	hpux-core.o \
	lynx-core.o \
	osf-core.o \
	sco-core.o \
	trad-core.o

# These are defined by configure.in:
# WORDSIZE=32
# BFD_BACKENDS = $(BFD32_BACKENDS)

all:

#### host and target dependent Makefile fragments come in here.
###

FLAGS_TO_PASS = \
	"prefix=$(prefix)" \
	"exec_prefix=$(exec_prefix)" \
	"against=$(against)" \
	"AR=$(AR)" \
	"AR_FLAGS=$(AR_FLAGS)" \
	"CC=$(CC)" \
	"CC_FOR_BUILD=$(CC_FOR_BUILD)" \
	"CFLAGS=$(CFLAGS)" \
	"RANLIB=$(RANLIB)" \
	"MAKEINFO=$(MAKEINFO)" \
	"INSTALL=$(INSTALL)" \
	"INSTALL_DATA=$(INSTALL_DATA)" \
	"INSTALL_PROGRAM=$(INSTALL_PROGRAM)" \
	"BISON=$(BISON)"

.c.o:
	$(CC) -c $(CFLAGS) $(HDEFINES) $(TDEFINES) $(CSEARCH) $(CSWITCHES) $<

# C source files that correspond to .o's.
CFILES = libbfd.c opncls.c bfd.c archive.c targets.c cache.c \
	 archures.c coff-i386.c aout64.c aout32.c sunos.c demo64.c \
	 coff-i960.c srec.c tekhex.c oasys.c ieee.c \
	 ecoff.c coff-m68k.c coff-u68k.c \
	 coff-a29k.c coff-rs6000.c coffgen.c format.c \
	 section.c core.c syms.c stab-syms.c reloc.c init.c ctor.c \
	 seclet.c coff-m88k.c coff-mips.c coff-sh.c trad-core.c newsos3.c \
	 i386aout.c i386linux.c netbsd386.c i386mach3.c bout.c aout-adobe.c coff-we32k.c \
	 i386bsd.c cpu-h8300.c cpu-i960.c cpu-sparc.c cpu-m68k.c \
	 cpu-m88k.c cpu-vax.c cpu-mips.c cpu-a29k.c cpu-i386.c \
	 cpu-rs6000.c coff-h8300.c som.c cpu-hppa.c cpu-we32k.c reloc16.c \
	 mipsbsd.c cpu-sh.c \
	 elf32.c elf32-sparc.c elf32-i386.c elf32-i860.c elf32-m68k.c \
	 elf32-hppa.c elf32-m88k.c elf32-mips.c elf32-gen.c \
	 elf64.c elf64-gen.c \
	 nlm32.c nlm32-gen.c nlm32-i386.c nlm64.c nlm64-gen.c \
	 coff-alpha.c cpu-alpha.c \
	 hp300bsd.c hp300hpux.c \
	 i386lynx.c i386lynx-cf.c m68klynx.c m68klynx-cf.c

STAGESTUFF = $(TARGETLIB) $(OFILES)

all: Makefile $(TARGETLIB) 
	@$(MAKE) subdir_do DO=all "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)

.NOEXPORT:
MAKEOVERRIDES=

check:
installcheck:

info dvi : force
	@$(MAKE) subdir_do DO=$@ "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)

clean-info:
	@$(MAKE) subdir_do DO=clean-info "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
	
install-info: force
	@$(MAKE) subdir_do DO=install-info "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)

# Various kinds of .o files to put in libbfd.a:
# BFD_LIBS	Generic routines, always needed.
# BFD_BACKENDS	Routines the configured targets need.
# BFD_MACHINES	Architecture-specific routines the configured targets need.
# HDEPFILES	Routines the host needs, regardless of target.
# TDEPFILES	Routines the target needs, regardless of host.
OFILES = $(BFD_LIBS) $(BFD_BACKENDS) $(BFD_MACHINES) $(HDEPFILES) $(TDEPFILES)

ofiles : Makefile
	rm -f ofiles
	f=""; \
	for i in $(OFILES) ; do \
	  case " $$f " in \
	    *" $$i "*) ;; \
	    *) f="$$f $$i" ;; \
	  esac ; \
	done ; \
	echo $$f > ofiles

$(TARGETLIB): $(OFILES) ofiles
	rm -f $(TARGETLIB)
	@echo ofiles = `cat ofiles`
	$(AR) $(AR_FLAGS) $(TARGETLIB) `cat ofiles`
	$(RANLIB) $(TARGETLIB)

# When compiling archures.c and targets.c, supply the default target
# info from configure.


targets.o: targets.c Makefile
	$(CC) -c $(CFLAGS) $(HDEFINES) $(TDEFINES) $(CSEARCH) $(CSWITCHES) $(TDEFAULTS) $<

archures.o: archures.c Makefile
	$(CC) -c $(CFLAGS) $(HDEFINES) $(TDEFINES) $(CSEARCH) $(CSWITCHES) $(TDEFAULTS) $<

subdir_do: force
	@for i in $(DODIRS); do \
		if [ -d ./$$i ] ; then \
			if (cd ./$$i; \
				$(MAKE) $(FLAGS_TO_PASS) $(DO)) ; then true ; \
			else exit 1 ; fi ; \
		else true ; fi ; \
	done

tags etags: TAGS

TAGS: force
	etags $(INCDIR)/*.h $(srcdir)/*.h $(srcdir)/*.c

do_mostlyclean:
	rm -f *.o *~ core *.E *.p *.ip aout-params.h gen-aout
do_clean: do_mostlyclean
	rm -f libbfd.a TAGS bfd.h stmp-bfd.h ofiles
do_distclean: do_clean
	rm -f Makefile config.status sysdep.h
do_realclean: do_distclean
	rm -f $(srcdir)/libcoff.h $(srcdir)/libbfd.h $(srcdir)/bfd-in2.h

mostlyclean: do_mostlyclean
	$(MAKE) subdir_do DO=mostlyclean "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
clean: do_clean
	$(MAKE) subdir_do DO=clean "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
distclean:
	$(MAKE) subdir_do DO=distclean "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
	$(MAKE) do_distclean
clobber realclean:
	$(MAKE) subdir_do DO=realclean "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
	$(MAKE) do_realclean

# Mark everything as depending on config.status, since the timestamp on
# sysdep.h might actually move backwards if we reconfig and relink it
# to a different hosts/h-xxx.h file.  This will force a recompile anyway.
RECONFIG = config.status
$(BFD_LIBS):  libbfd.h $(BFD_H) $(RECONFIG)
$(BFD_MACHINES):  libbfd.h $(BFD_H) $(RECONFIG)
$(BFD_BACKENDS):  libbfd.h $(BFD_H) $(RECONFIG)
$(OPTIONAL_BACKENDS):  libbfd.h $(BFD_H) $(RECONFIG)

# Get around a Sun Make bug in SunOS 4.1.1 with VPATH
cpu-i386.o:cpu-i386.c
cpu-z8k.o: cpu-z8k.c
cpu-h8500.o: cpu-h8500.c
cpu-we32k.o: cpu-we32k.c

saber:
	#suppress 65 on bfd_map_over_sections 
	#suppress 66 on bfd_map_over_sections 
	#suppress 67 on bfd_map_over_sections 
	#suppress 68 on bfd_map_over_sections 
	#suppress 69 on bfd_map_over_sections 
	#suppress 70 on bfd_map_over_sections 
	#suppress 110 in bfd_map_over_sections 
	#suppress 112 in bfd_map_over_sections 
	#suppress 530 
	#suppress 590 in swap_exec_header 
	#suppress 590 in _bfd_dummy_core_file_matches_executable_p 
	#suppress 590 in bfd_dont_truncate_arname
	#suppress 590 on ignore 
	#suppress 590 on abfd 
	#setopt load_flags $(CFLAGS)
	#load $(CFILES)


#-----------------------------------------------------------------------------
#		'STANDARD' GNU/960 TARGETS BELOW THIS POINT
#
# 'VERSION' file must be present and contain a string of the form "x.y"
#-----------------------------------------------------------------------------

ver960.c: FORCE
	rm -f ver960.c
	echo "char ${TARG}_ver[]= \"${TARG} `cat VERSION`, `date`\";" > ver960.c


# This target should be invoked before building a new release.
# 'VERSION' file must be present and contain a string of the form "x.y"
#
roll:
	@V=`cat VERSION`		; \
	MAJ=`sed 's/\..*//' VERSION`	; \
	MIN=`sed 's/.*\.//' VERSION`	; \
	V=$$MAJ.`expr $$MIN + 1`	; \
	rm -f VERSION			; \
	echo $$V >VERSION		; \
	echo Version $$V

# Dummy target to force execution of dependent targets.
#
force:

install:
	$(INSTALL_DATA) libbfd.a $(libdir)/libbfd.a
	$(RANLIB) $(libdir)/libbfd.a
# Install BFD include file, and others that it needs.  Install them
# both in GCC's include directory, and in the system include dir
# if configured as $(oldincludedir) -- which it usually isnt.
	$(INSTALL_DATA) $(BFD_H) $(includedir)/bfd.h
	$(INSTALL_DATA) $(INCDIR)/ansidecl.h $(includedir)/ansidecl.h
	$(INSTALL_DATA) $(INCDIR)/obstack.h $(includedir)/obstack.h
	-if test -z "$(oldincludedir)"; then true; else \
	test -d $(oldincludedir) || mkdir $(oldincludedir); \
	$(INSTALL_DATA) $(BFD_H) $(oldincludedir)/bfd.h; \
	$(INSTALL_DATA) $(INCDIR)/ansidecl.h $(oldincludedir)/ansidecl.h; \
	$(INSTALL_DATA) $(INCDIR)/obstack.h $(oldincludedir)/obstack.h; \
	@$(MAKE) subdir_do DO=install "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS); \
	fi

Makefile: Makefile.in configure.in $(host_makefile_frag) $(target_makefile_frag)
	$(SHELL) config.status

dep: $(CFILES)
	mkdep $(CFLAGS) $?

host-aout.o: Makefile

# The following program can be used to generate a simple config file
# which can be folded into an h-XXX file for a new host, with some editing.
aout-params.h: gen-aout
	./gen-aout > aout-params.h
gen-aout: $(srcdir)/gen-aout.c Makefile
	$(CC) -o gen-aout $(CFLAGS) $(LFLAGS) $(srcdir)/gen-aout.c

BFDIN_H= $(srcdir)/bfd-in2.h

$(BFD_H): stmp-bfd.h ; @true

# The file ../include/bfd.h is from earlier attempts to get this right.
# If the file is still there, kill it.
stmp-bfd.h : $(srcdir)/bfd-in2.h Makefile
	rm -f bfd.h-new 64 ../include/bfd.h
	-grep HOST_64_BIT sysdep.h > 64
	sed -e 's/@WORDSIZE@/$(WORDSIZE)/' -e '/64-bit.*sysdep.h/ r 64' < $(srcdir)/bfd-in2.h > bfd.h-new
	$(srcdir)/../move-if-change bfd.h-new $(BFD_H)
	rm -f 64
	touch stmp-bfd.h

# Could really use a "copy-if-change"...
headers:
	(cd $(docdir); $(MAKE) protos $(FLAGS_TO_PASS))
	cp $(docdir)/bfd.h bfd-in2.h-new
	$(srcdir)/../move-if-change bfd-in2.h-new $(srcdir)/bfd-in2.h
	cp $(docdir)/libbfd.h libbfd.h-new
	$(srcdir)/../move-if-change libbfd.h-new $(srcdir)/libbfd.h
	cp $(docdir)/libcoff.h libcoff.h-new
	$(srcdir)/../move-if-change libcoff.h-new $(srcdir)/libcoff.h

bfd.info:
	(cd $(docdir); $(MAKE) bfd.info $(FLAGS_TO_PASS))

bfd.dvi:
	(cd $(docdir); $(MAKE) bfd.dvi $(FLAGS_TO_PASS))

bfd.ps: 
	(cd $(docdir); $(MAKE) bfd.ps $(FLAGS_TO_PASS))

# What appears below is generated by a hacked mkdep using gcc -MM.

# DO NOT DELETE THIS LINE -- mkdep uses it.
# DO NOT PUT ANYTHING AFTER THIS LINE, IT WILL GO AWAY.

libbfd.o : libbfd.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h 
opncls.o : opncls.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h 
bfd.o : bfd.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h libecoff.h libelf.h
archive.o : archive.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/aout/ar.h $(INCDIR)/aout/ranlib.h 
targets.o : targets.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h 
cache.o : cache.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h 
archures.o : archures.c $(BFD_H) $(INCDIR)/obstack.h 
aout64.o : aout64.c 
aout32.o : aout32.c aoutx.h $(BFD_H) $(INCDIR)/ansidecl.h \
  $(INCDIR)/obstack.h libaout.h libbfd.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h 
sunos.o : sunos.c aoutf1.h $(BFD_H) $(INCDIR)/obstack.h \
  libaout.h libbfd.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h 
hp300hpux.o : hp300hpux.c aoutx.h $(BFD_H) $(INCDIR)/ansidecl.h \
  $(INCDIR)/obstack.h libaout.h libbfd.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/hp300hpux.h aout-target.h
hp300bsd.o : hp300bsd.c aoutx.h $(BFD_H) $(INCDIR)/ansidecl.h \
  $(INCDIR)/obstack.h libaout.h libbfd.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
demo64.o : demo64.c 

srec.o : srec.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h 
oasys.o : oasys.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/oasys.h liboasys.h 
ieee.o : ieee.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/ieee.h libieee.h 
coff-h8300.o: coff-h8300.c  $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/h8300.h $(INCDIR)/coff/internal.h libcoff.h coffcode.h \
  coffswap.h seclet.h 
coff-h8500.o: coff-h8500.c  $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/h8300.h $(INCDIR)/coff/internal.h libcoff.h coffcode.h \
  coffswap.h seclet.h 
coff-a29k.o: coff-a29k.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/a29k.h $(INCDIR)/coff/internal.h libcoff.h coffcode.h \
  coffswap.h seclet.h
coff-i386.o: coff-i386.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h libcoff.h coffcode.h \
  coffswap.h seclet.h 
coff-i960.o: coff-i960.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/i960.h $(INCDIR)/coff/internal.h libcoff.h coffcode.h \
  coffswap.h seclet.h 
coff-m68k.o: coff-m68k.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/internal.h libcoff.h coffcode.h \
  coffswap.h seclet.h 
coff-m88k.o: coff-m88k.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/m88k.h $(INCDIR)/coff/internal.h libcoff.h coffcode.h \
  coffswap.h seclet.h 
ecoff.o: ecoff.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/internal.h libecoff.h libcoff.h seclet.h \
  $(INCDIR)/aout/ar.h $(INCDIR)/aout/ranlib.h libaout.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h
coff-mips.o: coff-mips.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/mips.h $(INCDIR)/coff/internal.h libcoff.h \
  coffswap.h seclet.h libecoff.h ecoffswap.h $(INCDIR)/coff/ecoff.h
coff-alpha.o: coff-alpha.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/alpha.h $(INCDIR)/coff/internal.h libcoff.h \
  coffswap.h seclet.h libecoff.h ecoffswap.h $(INCDIR)/coff/ecoff.h
coff-rs6000.o: coff-rs6000.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/rs6000.h $(INCDIR)/coff/internal.h libcoff.h coffcode.h \
  coffswap.h seclet.h
coff-z8k.o: coff-z8k.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/z8k.h $(INCDIR)/coff/internal.h libcoff.h coffcode.h \
  coffswap.h seclet.h
coff-we32k.o: coff-we32k.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/we32k.h $(INCDIR)/coff/internal.h libcoff.h coffcode.h \
  coffswap.h seclet.h
coffgen.o: coffgen.c $(BFD_H) libbfd.h $(INCDIR)/coff/internal.h \
  libcoff.h
reloc16.o: reloc16.c $(BFD_H) libbfd.h $(INCDIR)/coff/internal.h \
  libcoff.h seclet.h
format.o : format.c $(BFD_H) \
  $(INCDIR)/obstack.h libbfd.h 
section.o : section.c $(BFD_H) \
  $(INCDIR)/obstack.h libbfd.h 
core.o : core.c $(BFD_H) \
  $(INCDIR)/obstack.h libbfd.h 
syms.o : syms.c $(BFD_H) \
  $(INCDIR)/obstack.h libbfd.h 
syms.o : stab-syms.c
reloc.o : reloc.c $(BFD_H) \
  $(INCDIR)/obstack.h libbfd.h 

trad-core.o : trad-core.c $(BFD_H) $(INCDIR)/obstack.h \
  libbfd.h libaout.h 
sco-core.o : sco-core.c $(BFD_H) libbfd.h libcoff.h \
  $(INCDIR)/obstack.h $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h
aix386-core.o : aix386-core.c $(BFD_H) libbfd.h libcoff.h \
  $(INCDIR)/obstack.h $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h
hpux-core.o : hpux-core.c $(BFD_H) libbfd.h libhppa.h
osf-core.o : osf-core.c $(BFD_H) libbfd.h

newsos3.o : newsos3.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h 
i386lynx.o : i386lynx.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h 
i386lynx-cf.o: i386lynx-cf.c coff-i386.c $(BFD_H) $(INCDIR)/obstack.h \
  libbfd.h $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h libcoff.h \
  coffcode.h coffswap.h seclet.h 
lynx-core.o : lynx-core.c $(BFD_H) libbfd.h
i386aout.o : i386aout.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h 
netbsd386.o : netbsd386.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h 
i386mach3.o : i386mach3.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h 
i386linux.o : i386linux.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h
i386bsd.o : i386bsd.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h 
bout.o : bout.c $(BFD_H) $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/bout.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def libaout.h
mipsbsd.o : mipsbsd.c $(BFD_H) $(INCDIR)/obstack.h \
  libbfd.h libaout.h
elf.o : elf.c libelf.h libbfd.h $(BFD_H) $(INCDIR)/obstack.h
elf32.o : elf32.c elfcode.h libelf.h libbfd.h $(BFD_H) \
  $(INCDIR)/obstack.h
elf32-sparc.o : elf32-sparc.c libelf.h libbfd.h $(BFD_H) \
  $(INCDIR)/obstack.h elf32-target.h
elf32-m68k.o : elf32-m68k.c libelf.h libbfd.h $(BFD_H) \
  $(INCDIR)/obstack.h elf32-target.h
elf32-i860.o : elf32-i860.c libelf.h libbfd.h $(BFD_H) \
  $(INCDIR)/obstack.h elf32-target.h
elf32-i386.o : elf32-i386.c libelf.h libbfd.h $(BFD_H) \
  $(INCDIR)/obstack.h elf32-target.h
elf32-hppa.o : elf32-hppa.c $(srcdir)/elf32-hppa.h $(srcdir)/libhppa.h \
  libelf.h libbfd.h $(BFD_H) $(INCDIR)/obstack.h elf32-target.h
elf32-m88k.o : elf32-m88k.c libelf.h libbfd.h \
  $(BFD_H) $(INCDIR)/obstack.h elf32-target.h
elf32-mips.o : elf32-mips.c libelf.h libbfd.h \
  $(BFD_H) $(INCDIR)/obstack.h $(INCDIR)/elf/mips.h elf32-target.h
elf32-gen.o : elf32-gen.c libelf.h libbfd.h \
  $(BFD_H) $(INCDIR)/obstack.h elf32-target.h
elf64.o : elf64.c elfcode.h libelf.h libbfd.h $(BFD_H) \
  $(INCDIR)/obstack.h
elf64-gen.o : elf64-gen.c libelf.h libbfd.h \
  $(BFD_H) $(INCDIR)/obstack.h elf64-target.h
nlm.o : nlm.c libnlm.h libbfd.h $(BFD_H) $(INCDIR)/obstack.h
nlm32.o : nlm32.c nlmcode.h libnlm.h libbfd.h $(BFD_H) \
  $(INCDIR)/obstack.h
nlm32-gen.o : nlm32-gen.c libnlm.h libbfd.h \
  $(BFD_H) $(INCDIR)/obstack.h nlm-target.h
nlm32-i386.o : nlm32-i386.c libnlm.h libbfd.h \
  $(BFD_H) $(INCDIR)/obstack.h nlm-target.h
nlm64.o : nlm64.c nlmcode.h libnlm.h libbfd.h $(BFD_H) \
  $(INCDIR)/obstack.h
nlm64-gen.o : nlm64-gen.c libnlm.h libbfd.h \
  $(BFD_H) $(INCDIR)/obstack.h nlm-target.h

# IF YOU PUT ANYTHING HERE IT WILL GO AWAY

