#!/bin/sh
# Please do not edit this file.  It is generated automatically from
# configure.in and a configure template.
configdirs=

#!/bin/sh

# Configuration script template
#   Copyright (C) 1988, 1990, 1991 Free Software Foundation, Inc.

#This file is part of GNU.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 1, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

# $Id$

#
# Shell script to create proper links to machine-dependent files in
# preparation for compiling gcc.
#
# Usage: configure [+srcdir=DIR] [+host=HOST] [+gas] [+nfp] TARGET
#
# If configure succeeds, it leaves its status in config.status.
# If configure fails after disturbing the status quo, 
# 	config.status is removed.
#

progname=$0

remove=rm
hard_link=ln
symbolic_link='ln -s'

#for Test
#remove="echo rm"
#hard_link="echo ln"
#symbolic_link="echo ln -s"

# clear some things potentially inherited from environment.
ansi=
hostsubdir=
norecurse=
removing=
srcdir=
target=
targetsubdir=
template=

for arg in $*;
do
	case $arg in
	-ansi | +ansi)
		ansi=true
		;;
	-forcesubdirs | +f*)
		forcesubdirs=${arg}
		;;
	-host=* | +host=* | +hos=* | +ho=* | +h=*)
		host=`echo $arg | sed 's/[+-]h[a-z]*=//'`
		;; 
	-languages=* | +languages=* | +language=* | +languag=* \
		| +langua=* | +langu=* | +lang=* | +lan=* | +la=* \
		| +l=*)
		languages="$languages `echo $arg | sed 's/[+-]l[a-z]*=//'`"
		;;
	-gas | +gas | +ga | +g)
		gas=yes
		;;
	-nfp | +nfp | +nf | +n)
		nfp=yes
		;;
	-norecurse | +norecurse)
		norecurse=true
		;;
	-rm | +rm)
		removing=$arg
		;;
	-srcdir=* | +srcdir=* | +srcdi=* | +srcd=* | +src=* | +sr=* | +s=*)
		srcdir=`echo $arg | sed 's/[+-]s[a-z]*=//'`
		;;
	-template=* | +template=*)
		template=`echo $arg | sed 's/[+-]template=//'`
		;;
	*)
# Allow configure HOST TARGET
		if [ x$host = x ] ; then host=$target ; fi
		target=$arg
		;;
	esac
done

# process host and target only if not rebuilding configure itself or removing.
if [ -z "$template" -a -z "$removing" ]
then
	# Complain if an arg is missing
	if [ -z "$target" ]
	then
		echo "Usage: $progname [+srcdir=DIR] [+host=HOST] [+gas] [+nfp] TARGET"
		echo -n "Where HOST and TARGET are something like "
		echo "\`vax', \`sun3', \`encore', etc."
		if [ -r config.status ]
		then
			cat config.status
		fi
		exit 1
	fi
fi

# Default other arg
if [ -z "$host" ]
then
	host=$target
fi

#### configure.in files come in here.
# This file is a shell script fragment that supplies the information
# necessary to tailor a template configure script into the configure
# script appropriate for this directory.  For more information, check
# any existing configure script.

configdirs="bfd binutils ld gas gcc"
srctrigger=README.configure
srcname="gnu development package"
### end of configure.in

# are we rebuilding config itself?
if [ -n "$template" ]
then
	if [ ! -r $template ]
	then
		echo "Can't find template ${template}."
		exit 1
	fi

	mv configure configure.old
	echo "#!/bin/sh" > configure
	echo "# Please do not edit this file.  It is generated automatically from" >> configure
	echo "# configure.in and a configure template." >> configure
	echo "configdirs=" >> configure
	echo >> configure

	if [ -r configure.in ]
	then
		sed -e "/^####/  r configure.in" $template >> configure
	else
		cat $template >> configure
	fi

	chmod a+x configure
	rm configure.old
	echo Rebuilt configure in `pwd`

	if [ x$norecurse = x ]
	then
		while [ -n "$configdirs" ]
		do
			# set configdir to car of configdirs, configdirs to cdr of configdirs
			set $configdirs; configdir=$1; shift; configdirs=$*

			if [ "`echo ${configdir}.*`" != "${configdir}.*" ]
			then
				targetspecificdirs=${configdir}.*
			else
				targetspecificdirs=
			fi

			for i in ${configdir} ${targetspecificdirs}
			do
				if [ -r $i/configure ]
				then
					(cd $i ;
						configure +template=${template})
				else
					echo No configure script in `pwd`/$i
				fi
			done
		done
	fi

	exit 0
fi

# Temporarily, we support only direct subdir builds.
hostsubdir=Host-${host}
targetsubdir=Target-${target}

if [ -n "${removing}" ]
then
	if [ -d "${hostsubdir}/${targetsubdir}" ]
	then
		rm -rf ${hostsubdir}/${targetsubdir}

		if [ -z "`(ls ${hostsubdir}) 2>&1 | grep Target-`" ]
		then
			rm -rf ${hostsubdir}
		fi
	else
		rm -f .gdbinit Makefile config.status $links
	fi
else
	if [ -n "$forcesubdirs" ]
	then
		# check for existing status before allowing forced subdirs.
		if [ -f Makefile ]
		then
			echo "Makefile already exists in source directory.  `pwd` not configured."
			exit 1
		fi

		if [ ! -d $hostsubdir ] ; then mkdir $hostsubdir ; fi
		cd $hostsubdir
	
		if [ ! -d $targetsubdir ] ; then mkdir $targetsubdir ; fi
		cd $targetsubdir
	
		srcdir=../..
	else
		# if not subdir builds, then make sure none exist.
		if [ -n "`(ls .) 2>&1 | grep Host-`" ]
		then
			echo "Configured subdirs exist.  `pwd` not configured."
			exit 1
		fi
	fi

	# Find the source files, if location was not specified.
	if [ x$srcdir = x ]
	then
		srcdirdefaulted=1
		srcdir=.
		if [ ! -r ${srctrigger} ]
		then
			srcdir=..
		fi
	fi
	
	if [ ! -r ${srcdir}/${srctrigger} ]
	then
		if [ -z "$srcdirdefaulted" ]
		then
		  echo "$progname: Can't find ${srcname} sources in \`${srcdir}'." 1>&2
		else
		  echo "$progname: Can't find ${srcname} sources in \`.' or \`..'." 1>&2
		fi
		exit 1
	fi

	# Set up the list of links to be made.
	# $links is the list of link names, and $files is the list of names to link to.

	# Make the links.
	while [ -n "$files" ]
	do
		# set file to car of files, files to cdr of files
		set $files; file=$1; shift; files=$*
		set $links; link=$1; shift; links=$*

		if [ ! -r ${srcdir}/${file} ]
		then
			echo "$progname: cannot create a link \"${link}\"," 1>&2
			echo "since the file \"$file\" does not exist." 1>&2
			exit 1
		fi

		$remove -f $link
		rm -f config.status
		# Make a symlink if possible, otherwise try a hard link
		$symbolic_link ${srcdir}/$file $link 2>/dev/null || $hard_link ${srcdir}/$file $link

		if [ ! -r $link ]
		then
			echo "$progname: unable to link \"$link\" to \"${srcdir}/$file\"." 1>&2
			exit 1
		fi
		echo "Linked \"$link\" to \"${srcdir}/${file}\"."
	done

	# Create a .gdbinit file which runs the one in srcdir
	# and tells GDB to look there for source files.

	case $srcdir in
	.)
		;;
	*)
		echo "dir ." > .gdbinit
		echo "dir ${srcdir}" >> .gdbinit
		echo "source ${srcdir}/.gdbinit" >> .gdbinit
		;;
	esac

	# Install a makefile, and make it set VPATH
	# if necessary so that the sources are found.
	# Also change its value of srcdir.

# FIXME-someday: This business of always writing to .tem and mv back
# is so that I don't screw things up while developing.  Once this
# template is stable, these should be optimized. xoxorich.

	# Define macro CROSS_COMPILE in compilation if this is a cross-compiler.
	if [ x$host != x$target ]
	then
		echo "CROSS=-DCROSS_COMPILE" > Makefile
		echo "ALL=start.encap" >> Makefile
	else
		echo "ALL=all.internal" > Makefile
	fi

	# set target, host, VPATH
	echo "host = $host" >> Makefile
	echo "target = $target" >> Makefile

	if [ -n "${forcesubdirs}" ]
	then
		echo "subdir = /${hostsubdir}/${targetsubdir}" >> Makefile
	else
		echo "subdir =" >> Makefile
	fi

#	echo "workdir = `pwd`" >> Makefile
	echo "VPATH = ${srcdir}" >> Makefile

	# add Makefile.in
	cat ${srcdir}/Makefile.in >> Makefile

	# and shake thoroughly.
	host_var_file=hmake-${host}
	target_var_file=tmake-${target}

	# Conditionalize the makefile for this machine.
	if [ -f ${srcdir}/config/${host_var_file} ]
	then
		sed -e "/^####/  r ${srcdir}/config/${host_var_file}" Makefile > Makefile.tem
		mv Makefile.tem Makefile
	fi

	if [ -f ${srcdir}/config/${target_var_file} ]
	then
		sed -e "/^####/  r ${srcdir}/config/${target_var_file}" Makefile > Makefile.tem
		mv Makefile.tem Makefile
	fi

	sed "s@^srcdir = \.@srcdir = ${srcdir}@" Makefile > Makefile.tem
	mv Makefile.tem Makefile

	# Remove all formfeeds, since some Makes get confused by them.
	sed "s///" Makefile >> Makefile.tem
	mv Makefile.tem Makefile

	# reset SUBDIRS
	sed "s:^SUBDIRS =.*$:SUBDIRS = ${configdirs}:" Makefile > Makefile.tem
	mv Makefile.tem Makefile

	# reset NONSUBDIRS
	sed "s:^NONSUBDIRS =.*$:NONSUBDIRS = ${noconfigdirs}:" Makefile > Makefile.tem
	mv Makefile.tem Makefile

	using=
	if [ -f ${srcdir}/config/${host_var_file} ]
	then
		using=" using \"${host_var_file}\""
	fi

	if [ -f ${srcdir}/config/${target_var_file} ]
	then
		if [ -z "${using}" ]
		then
			andusing=" using \"${target_var_file}\""
		else
			andusing="${using} and \"${target_var_file}\""
		fi
	else
		andusing=${using}
	fi

	echo "Created \"Makefile\""${andusing}.

	if [ x$host = x$target ]
	then
		echo "Links are now set up for use with a $target." \
			> config.status
#			| tee ${srcdir}/config.status
	else
		echo "Links are now set up for host $host and target $target." \
			> config.status
#			| tee ${srcdir}/config.status
	fi

	originaldir=`pwd`
	cd ${srcdir}
fi

# If there are subdirectories, then recurse. 

if [ -n "$norecurse" ] ; then exit 0 ; fi

while [ -n "$configdirs" ]
do
	# set configdir to car of configdirs, configdirs to cdr of configdirs
	set $configdirs; configdir=$1; shift; configdirs=$*

	# check for target override
	targetspecificdir=${configdir}.${target}
	if [ -d ${targetspecificdir} ]
	then
		configdir=${targetspecificdir}
	fi

	echo Configuring ${configdir}...
	(cd ${configdir} ;
		./configure ${forcesubdirs} ${removing} +host=${host} ${target}) \
		| sed 's/^/	/'
done

exit 0

#
# $Log$
# Revision 1.3  1991/04/11 02:41:51  rich
# Cut 2 config.  Subdirs.
#
#
#


# end of configure.template
