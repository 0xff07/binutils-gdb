# .Sanitize for devo/gas/testsuite/gas/mips.

# Each directory to survive it's way into a release will need a file
# like this one called "./.Sanitize".  All keyword lines must exist,
# and must exist in the order specified by this file.  Each directory
# in the tree will be processed, top down, in the following order.

# Hash started lines like this one are comments and will be deleted
# before anything else is done.  Blank lines will also be squashed
# out.

# The lines between the "Do-first:" line and the "Things-to-keep:"
# line are executed as a /bin/sh shell script before anything else is
# done in this 

Do-first:

vr5400_losers="vr5400.s vr5400.d"
if ( echo $* | grep keep\-vr5400 > /dev/null ) ; then
	keep_these_too="$keep_these_too $vr5400_losers"
	if [ -n "${verbose}" ] ; then
		for i in $vr5400_losers ; do
			echo Keeping $i
		done
	fi
else
	for i in $vr5400_losers ; do
		if [ -n "${verbose}" ] ; then
			echo Removing $i...
		fi
		if [ -n "${safe}" -a ! -f .Recover/$i ] ; then
			if [ -n "${verbose}" ] ; then
				echo Caching $i in .Recover...
			fi
			mv $i .Recover
		else
			rm $i
		fi
	done
fi

r5900_losers="r5900.s r5900.d vu0.s vu0.d"
if ( echo $* | grep keep\-r5900 > /dev/null ) ; then
	keep_these_too="$keep_these_too $r5900_losers"
	if [ -n "${verbose}" ] ; then
		for i in $r5900_losers ; do
			echo Keeping $i
		done
	fi
else
	for i in $r5900_losers ; do
		if [ -n "${verbose}" ] ; then
			echo Removing $i...
		fi
		if [ -n "${safe}" -a ! -f .Recover/$i ] ; then
			if [ -n "${verbose}" ] ; then
				echo Caching $i in .Recover...
			fi
			mv $i .Recover
		else
			rm $i
		fi
	done
fi

# All files listed between the "Things-to-keep:" line and the
# "Files-to-sed:" line will be kept.  All other files will be removed.
# Directories listed in this section will have their own Sanitize
# called.  Directories not listed will be removed in their entirety
# with rm -rf.

Things-to-keep:

abs.d
abs.s
add.d
add.s
and.d
and.s
beq.d
beq.s
bge.d
bge.s
bgeu.d
bgeu.s
blt.d
blt.s
bltu.d
bltu.s
delay.d
delay.s
div-ilocks.d
div.d
div.s
dli.d
dli.s
itbl
itbl.s
jal-empic.d
jal-svr4pic.d
jal-svr4pic.s
jal-xgot.d
jal.d
jal.s
la-empic.d
la-empic.s
la-svr4pic.d
la-xgot.d
la.d
la.s
lb-empic.d
lb-pic.s
lb-svr4pic.d
lb-xgot.d
lb-xgot-ilocks.d
lb.d
lb.s
ld.d
ld.s
ld-empic.d
ld-ilocks.d
ld-pic.s
ld-svr4pic.d
ld-xgot.d
li.d
li.s
lif-empic.d
lif-svr4pic.d
lif-xgot.d
lifloat.d
lifloat.s
mips.exp
mips16.d
mips16.s
mips4.d
mips4.s
mips4010.d
mips4010.s
mips4100.d
mips4100.s
mips4650.d
mips4650.s
mul-ilocks.d
mul.d
mul.s
nodelay.d
rol.d
rol.s
sb.d
sb.s
trunc.d
trunc.s
ulh-empic.d
ulh-pic.s
ulh-svr4pic.d
ulh-xgot.d
uld.d
uld.s
ulh.d
ulh.s
ulw.d
ulw.s
usd.d
usd.s
ush.d
ush.s
usw.d
usw.s

Things-to-lose:

Do-last:

tx19_files="mips.exp"
if ( echo $* | grep keep\-tx19 > /dev/null ) ; then
	for i in $tx19_files ; do
		if test ! -d $i && (grep sanitize-tx19 $i > /dev/null) ; then
			if [ -n "${verbose}" ] ; then
				echo Keeping tx19 stuff in $i
			fi
		fi
	done
else
	for i in $tx19_files ; do
		if test ! -d $i && (grep sanitize-tx19 $i > /dev/null) ; then
			if [ -n "${verbose}" ] ; then
				echo Removing traces of \"tx19\" from $i...
			fi
			cp $i new
			sed '/start\-sanitize\-tx19/,/end-\sanitize\-tx19/d' < $i > new
			if [ -n "${safe}" -a ! -f .Recover/$i ] ; then
				if [ -n "${verbose}" ] ; then
					echo Caching $i in .Recover...
				fi
				mv $i .Recover
			fi
			mv new $i
		fi
	done
fi

tx49_files="mips.exp"
if ( echo $* | grep keep\-tx49 > /dev/null ) ; then
	for i in $tx49_files ; do
		if test ! -d $i && (grep sanitize-tx49 $i > /dev/null) ; then
			if [ -n "${verbose}" ] ; then
				echo Keeping tx49 stuff in $i
			fi
		fi
	done
else
	for i in $tx49_files ; do
		if test ! -d $i && (grep sanitize-tx49 $i > /dev/null) ; then
			if [ -n "${verbose}" ] ; then
				echo Removing traces of \"tx49\" from $i...
			fi
			cp $i new
			sed '/start\-sanitize\-tx49/,/end-\sanitize\-tx49/d' < $i > new
			if [ -n "${safe}" -a ! -f .Recover/$i ] ; then
				if [ -n "${verbose}" ] ; then
					echo Caching $i in .Recover...
				fi
				mv $i .Recover
			fi
			mv new $i
		fi
	done
fi

vr4320_files="mips.exp"
if ( echo $* | grep keep\-vr4320 > /dev/null ) ; then
	for i in $vr4320_files ; do
		if test ! -d $i && (grep sanitize-vr4320 $i > /dev/null) ; then
			if [ -n "${verbose}" ] ; then
				echo Keeping vr4320 stuff in $i
			fi
		fi
	done
else
	for i in $vr4320_files ; do
		if test ! -d $i && (grep sanitize-vr4320 $i > /dev/null) ; then
			if [ -n "${verbose}" ] ; then
				echo Removing traces of \"vr4320\" from $i...
			fi
			cp $i new
			sed '/start\-sanitize\-vr4320/,/end-\sanitize\-vr4320/d' < $i > new
			if [ -n "${safe}" -a ! -f .Recover/$i ] ; then
				if [ -n "${verbose}" ] ; then
					echo Caching $i in .Recover...
				fi
				mv $i .Recover
			fi
			mv new $i
		fi
	done
fi

vr5400_files="mips.exp"
if ( echo $* | grep keep\-vr5400 > /dev/null ) ; then
	for i in $vr5400_files ; do
		if test ! -d $i && (grep sanitize-vr5400 $i > /dev/null) ; then
			if [ -n "${verbose}" ] ; then
				echo Keeping vr5400 stuff in $i
			fi
		fi
	done
else
	for i in $vr5400_files ; do
		if test ! -d $i && (grep sanitize-vr5400 $i > /dev/null) ; then
			if [ -n "${verbose}" ] ; then
				echo Removing traces of \"vr5400\" from $i...
			fi
			cp $i new
			sed '/start\-sanitize\-vr5400/,/end-\sanitize\-vr5400/d' < $i > new
			if [ -n "${safe}" -a ! -f .Recover/$i ] ; then
				if [ -n "${verbose}" ] ; then
					echo Caching $i in .Recover...
				fi
				mv $i .Recover
			fi
			mv new $i
		fi
	done
fi

r5900_files="mips.exp"
if ( echo $* | grep keep\-r5900 > /dev/null ) ; then
	for i in $r5900_files ; do
		if test ! -d $i && (grep sanitize-r5900 $i > /dev/null) ; then
			if [ -n "${verbose}" ] ; then
				echo Keeping r5900 stuff in $i
			fi
		fi
	done
else
	for i in $r5900_files ; do
		if test ! -d $i && (grep sanitize-r5900 $i > /dev/null) ; then
			if [ -n "${verbose}" ] ; then
				echo Removing traces of \"r5900\" from $i...
			fi
			cp $i new
			sed '/start\-sanitize\-r5900/,/end-\sanitize\-r5900/d' < $i > new
			if [ -n "${safe}" -a ! -f .Recover/$i ] ; then
				if [ -n "${verbose}" ] ; then
					echo Caching $i in .Recover...
				fi
				mv $i .Recover
			fi
			mv new $i
		fi
	done
fi

# End of file.
