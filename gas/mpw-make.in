# Makefile fragment for GAS.

VERSION = cygnus-2.3.1

gC = gC1

s = "{srcdir}"

o = :

CROSS = -d CROSS_COMPILE

ALL_CFLAGS = {CFLAGS} {CROSS} -d HAVE_STDARG_H -d TARGET_BYTES_BIG_ENDIAN -d BFD_ASSEMBLER -i "{topsrcdir}"include: -i "{topsrcdir}"bfd:,"{srcdir}",::libiberty:,::bfd:,::extra-include,"{srcroot}"include:mpw:
# debug options: -mbg on -sym on

"{o}" \Option-f : "{s}"

# Default rule that puts each file into separate segment.

.c.o  \Option-f .c
   {CC}  {DepDir}{Default}.c {ALL_CFLAGS} -s gas_{Default} -o {TargDir}{Default}.c.o

.gc.o  \Option-f .c
   {gC}  {DepDir}{Default}.c {ALL_CFLAGS} -s gas_{Default} -o {TargDir}{Default}.gc.o

prefix = usr:local:

bindir = {prefix}bin:

OBJECTS = \Option-d
		"{o}"app.c.o \Option-d
		"{o}"as.c.o \Option-d
		"{o}"atof-generic.c.o \Option-d
		"{o}"bignum-copy.c.o \Option-d
		"{o}"cond.c.o \Option-d
		"{o}"expr.c.o \Option-d
		"{o}"flonum-konst.c.o \Option-d
		"{o}"flonum-copy.c.o \Option-d
		"{o}"flonum-mult.c.o \Option-d
		"{o}"frags.c.o \Option-d
		"{o}"hash.c.o \Option-d
		"{o}"hex-value.c.o \Option-d
		"{o}"input-file.c.o \Option-d
		"{o}"input-scrub.c.o \Option-d
		"{o}"listing.c.o \Option-d
		"{o}"messages.c.o \Option-d
		"{o}"output-file.c.o \Option-d
		"{o}"read.c.o \Option-d
		"{o}"stabs.c.o \Option-d
		"{o}"subsegs.c.o \Option-d
		"{o}"symbols.c.o \Option-d
		"{o}"write.c.o \Option-d
		"{o}"ecoff.c.o \Option-d
		"{o}"xmalloc.c.o \Option-d

TARG_OBJECTS =  "{o}"obj-format.c.o "{o}"targ-cpu.c.o "{o}"atof-targ.c.o

# If you put config.h in INCLUDES, then MPW's stupid make will always
# want to rebuild everything.  Better to do in two stages.

INCLUDES =
# "{o}"config.h
# host.h
#"{s}".h

CLIBS = ::libiberty:libiberty.o	::bfd:libbfd.o ::opcodes:libopcodes.o

all \Option-f as.new

as.new \Option-f\Option-f {OBJECTS} {TARG_OBJECTS} {CLIBS}
	Link {LDFLAGS} -o as.new {OBJECTS} {TARG_OBJECTS} {CLIBS} {EXTRALIBS}


"{o}"config.h \Option-f "{o}"config-stamp

"{o}"config-stamp \Option-f Makefile
	Delete -i -y "{o}"config.new "{o}"config-stamp
	echo '#ifndef GAS_VERSION'			       > "{o}"config.new
	echo '#define TARGET_CPU       "{target_cpu}"'        >> "{o}"config.new
	echo '#define TARGET_ALIAS     "{target_alias}"'      >> "{o}"config.new
	echo '#define TARGET_CANONICAL "{target_canonical}"'  >> "{o}"config.new
	echo '#define GAS_VERSION      "{VERSION}"'           >> "{o}"config.new
#	if [ "$(defs)" != "" ]; then \
#	  for d in .. $(defs) ; do \
#	    if [ "$$d" != ".." ]; then \
#	      echo "#define $$d"			      >> "{o}"config.new ; \
#	    else true; fi; \
#	  done ; \
#	else true; fi
	echo '#endif /* GAS_VERSION */'			      >> "{o}"config.new
	MoveIfChange "{o}"config.new "{o}"config.h
	Echo ' ' >"{o}"config-stamp

"{o}"app.c.o \Option-f "{s}"app.c {INCLUDES}
"{o}"as.c.o \Option-f "{s}"as.c {INCLUDES}
"{o}"atof-generic.c.o \Option-f "{s}"atof-generic.c {INCLUDES}
"{o}"bignum-copy.c.o \Option-f "{s}"bignum-copy.c {INCLUDES}
"{o}"cond.c.o \Option-f "{s}"cond.c {INCLUDES}
"{o}"expr.c.o \Option-f "{s}"expr.c {INCLUDES}
"{o}"flonum-konst.c.o \Option-f "{s}"flonum-konst.c {INCLUDES}
"{o}"flonum-copy.c.o \Option-f "{s}"flonum-copy.c {INCLUDES}
"{o}"flonum-mult.c.o \Option-f "{s}"flonum-mult.c {INCLUDES}
"{o}"frags.c.o \Option-f "{s}"frags.c {INCLUDES}
"{o}"hash.c.o \Option-f "{s}"hash.c {INCLUDES}
"{o}"hex-value.c.o \Option-f "{s}"hex-value.c {INCLUDES}
"{o}"input-file.c.o \Option-f "{s}"input-file.c {INCLUDES}
"{o}"input-scrub.c.o \Option-f "{s}"input-scrub.c {INCLUDES}
"{o}"listing.c.o \Option-f "{s}"listing.c {INCLUDES}
"{o}"messages.c.o \Option-f "{s}"messages.c {INCLUDES}
"{o}"output-file.c.o \Option-f "{s}"output-file.c {INCLUDES}
"{o}"read.c.o \Option-f "{s}"read.c {INCLUDES}
"{o}"subsegs.c.o \Option-f "{s}"subsegs.c {INCLUDES}
"{o}"symbols.c.o \Option-f "{s}"symbols.c {INCLUDES}
"{o}"write.c.o \Option-f "{s}"write.c {INCLUDES}
"{o}"ecoff.c.o \Option-f "{s}"ecoff.c {INCLUDES}
"{o}"xmalloc.c.o \Option-f "{s}"xmalloc.c {INCLUDES}

"{o}"targ-cpu.c.o \Option-f "{o}"targ-cpu.c {INCLUDES}
"{o}"obj-format.c.o \Option-f "{o}"obj-format.c {INCLUDES}
"{o}"atof-targ.c.o \Option-f "{o}"atof-targ.c {INCLUDES}

install \Option-f  all install-only

install-only \Option-f
	If "`Exists "{prefix}"`" == ""
		Echo "{prefix}" does not exist, cannot install anything
		Exit 1
	End If
	If "`Exists "{bindir}"`" == ""
		NewFolder "{bindir}"
	End If
	Duplicate -y :as.new "{bindir}"as
