From 9046ca22d4309175ebde098667f41e80d3dc895d Mon Sep 17 00:00:00 2001
From: "H.J. Lu" <hjl.tools@gmail.com>
Date: Fri, 26 Apr 2019 14:05:47 -0700
Subject: [PATCH 1/3] ld: Initial -z prefer-min-page-size support

PT_LOAD segment p_align should only apply to the specific PT_LOAD
segment, not maxpagesize, especially when p_align is smaller than
maxpagesize, like:

Program Headers:
  Type  Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
  LOAD  0x000000 0x00000000 0x00000000 0x01094 0x01094 R   0x1000
  LOAD  0x200000 0x00200000 0x00200000 0x10000000 0x10000000 R E 0x200000
  LOAD  0x10200000 0x10200000 0x10200000 0x00004 0x00004 RW  0x1000

	* elf.c (assign_file_positions_for_load_sections): Don't change
	maxpagesize to segment map p_align.
---
 bfd/elf.c             | 39 ++++++++++++++++++++++++++++++++++-----
 bfd/elf64-x86-64.c    | 12 ++----------
 include/bfdlink.h     |  3 +++
 ld/config.in          |  4 ++++
 ld/configure          | 25 +++++++++++++++++++++++--
 ld/configure.ac       | 14 ++++++++++++++
 ld/configure.tgt      |  6 +++++-
 ld/emultempl/elf32.em |  5 +++++
 ld/lexsup.c           | 11 +++++++++++
 9 files changed, 101 insertions(+), 18 deletions(-)

diff --git a/bfd/elf.c b/bfd/elf.c
index 952e4bfe11..845819d150 100644
--- a/bfd/elf.c
+++ b/bfd/elf.c
@@ -5397,7 +5397,39 @@ assign_file_positions_for_load_sections (bfd *abfd,
 
   maxpagesize = 1;
   if ((abfd->flags & D_PAGED) != 0)
-    maxpagesize = bed->maxpagesize;
+    {
+      maxpagesize = bed->maxpagesize;
+      if (link_info != NULL
+	  && link_info->prefer_min_page_size
+	  && maxpagesize > bed->minpagesize)
+	{
+	  /* Prefer minpagesize if maxpagesize is bigger than the
+	     PT_LOAD segment size.  */
+	  asection **secpp;
+	  bfd_size_type seg_size;
+
+	  for (m = elf_seg_map (abfd); m != NULL; m = m->next)
+	    if (!m->p_align_valid && m->p_type == PT_LOAD)
+	      {
+		seg_size = 0;
+		if (m->count > 0)
+		  {
+		    secpp = m->sections;
+		    for (i = 0; i < m->count; i++)
+		      {
+			Elf_Internal_Shdr *this_hdr;
+			this_hdr = &elf_section_data (secpp[i])->this_hdr;
+			seg_size += this_hdr->sh_size;
+		      }
+		  }
+		if (seg_size < maxpagesize)
+		  {
+		    m->p_align = bed->minpagesize;
+		    m->p_align_valid = 1;
+		  }
+	      }
+	}
+    }
 
   off = bed->s->sizeof_ehdr;
   off += alloc * bed->s->sizeof_phdr;
@@ -5457,10 +5489,7 @@ assign_file_positions_for_load_sections (bfd *abfd,
 	     segment alignment later in this function, so we are relying
 	     on at least one PT_LOAD segment appearing before a PT_TLS
 	     segment.  */
-	  if (m->p_align_valid)
-	    maxpagesize = m->p_align;
-
-	  p->p_align = maxpagesize;
+	  p->p_align = m->p_align_valid ? m->p_align : maxpagesize;
 	  pt_load_count += 1;
 	}
       else if (m->p_align_valid)
diff --git a/bfd/elf64-x86-64.c b/bfd/elf64-x86-64.c
index 2f6923927f..6a15793037 100644
--- a/bfd/elf64-x86-64.c
+++ b/bfd/elf64-x86-64.c
@@ -5122,11 +5122,7 @@ elf_x86_64_special_sections[]=
 #define ELF_ARCH			    bfd_arch_i386
 #define ELF_TARGET_ID			    X86_64_ELF_DATA
 #define ELF_MACHINE_CODE		    EM_X86_64
-#if DEFAULT_LD_Z_SEPARATE_CODE
-# define ELF_MAXPAGESIZE		    0x1000
-#else
-# define ELF_MAXPAGESIZE		    0x200000
-#endif
+#define ELF_MAXPAGESIZE			    0x200000
 #define ELF_MINPAGESIZE			    0x1000
 #define ELF_COMMONPAGESIZE		    0x1000
 
@@ -5531,11 +5527,7 @@ elf64_l1om_elf_object_p (bfd *abfd)
 #undef	ELF_MAXPAGESIZE
 #undef	ELF_MINPAGESIZE
 #undef	ELF_COMMONPAGESIZE
-#if DEFAULT_LD_Z_SEPARATE_CODE
-# define ELF_MAXPAGESIZE		0x1000
-#else
-# define ELF_MAXPAGESIZE		0x200000
-#endif
+#define ELF_MAXPAGESIZE			0x200000
 #define ELF_MINPAGESIZE			0x1000
 #define ELF_COMMONPAGESIZE		0x1000
 #undef	elf_backend_plt_alignment
diff --git a/include/bfdlink.h b/include/bfdlink.h
index c35469dd11..10dccd003b 100644
--- a/include/bfdlink.h
+++ b/include/bfdlink.h
@@ -394,6 +394,9 @@ struct bfd_link_info
   /* TRUE if separate code segment should be created.  */
   unsigned int separate_code: 1;
 
+  /* TRUE if the minimum page size is preferred.  */
+  unsigned int prefer_min_page_size: 1;
+
   /* Nonzero if .eh_frame_hdr section and PT_GNU_EH_FRAME ELF segment
      should be created.  1 for DWARF2 tables, 2 for compact tables.  */
   unsigned int eh_frame_hdr_type: 2;
diff --git a/ld/config.in b/ld/config.in
index d93c9b0830..396f008499 100644
--- a/ld/config.in
+++ b/ld/config.in
@@ -16,6 +16,10 @@
 /* Define if you want compressed debug sections by default. */
 #undef DEFAULT_FLAG_COMPRESS_DEBUG
 
+/* Define to 1 if you want to enable -z prefer-min-page-size in ELF linker by
+   default. */
+#undef DEFAULT_LD_Z_PREFER_MIN_PAGE_SIZE
+
 /* Define to 1 if you want to enable -z relro in ELF linker by default. */
 #undef DEFAULT_LD_Z_RELRO
 
diff --git a/ld/configure b/ld/configure
index 3b50f5db8e..1d97db7370 100755
--- a/ld/configure
+++ b/ld/configure
@@ -829,6 +829,7 @@ enable_compressed_debug_sections
 enable_new_dtags
 enable_relro
 enable_separate_code
+enable_prefer_min_page_size
 enable_default_hash_style
 enable_werror
 enable_build_warnings
@@ -1495,6 +1496,9 @@ Optional Features:
   --enable-new-dtags      set DT_RUNPATH instead of DT_RPATH by default]
   --enable-relro          enable -z relro in ELF linker by default
   --enable-separate-code  enable -z separate-code in ELF linker by default
+  --enable-prefer-min-page-size
+                          enable -z prefer-min-page-size in ELF linker by
+                          default
   --enable-default-hash-style={sysv,gnu,both}
                           use this default hash style
   --enable-werror         treat compile warnings as errors
@@ -12027,7 +12031,7 @@ else
   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
   lt_status=$lt_dlunknown
   cat > conftest.$ac_ext <<_LT_EOF
-#line 12030 "configure"
+#line 12034 "configure"
 #include "confdefs.h"
 
 #if HAVE_DLFCN_H
@@ -12133,7 +12137,7 @@ else
   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
   lt_status=$lt_dlunknown
   cat > conftest.$ac_ext <<_LT_EOF
-#line 12136 "configure"
+#line 12140 "configure"
 #include "confdefs.h"
 
 #if HAVE_DLFCN_H
@@ -15882,6 +15886,18 @@ esac
 fi
 
 
+# Decide if -z prefer-min-page-size should be enabled in ELF linker by
+# default.
+ac_default_ld_z_prefer_min_page_size=unset
+# Check whether --enable-prefer-min-page-size was given.
+if test "${enable_prefer_min_page_size+set}" = set; then :
+  enableval=$enable_prefer_min_page_size; case "${enableval}" in
+  yes) ac_default_ld_z_prefer_min_page_size=1 ;;
+  no) ac_default_ld_z_prefer_min_page_size=0 ;;
+esac
+fi
+
+
 # Decide which "--hash-style" to use by default
 # Provide a configure time option to override our default.
 # Check whether --enable-default-hash-style was given.
@@ -17602,6 +17618,11 @@ cat >>confdefs.h <<_ACEOF
 _ACEOF
 
 
+cat >>confdefs.h <<_ACEOF
+#define DEFAULT_LD_Z_PREFER_MIN_PAGE_SIZE $ac_default_ld_z_prefer_min_page_size
+_ACEOF
+
+
 
 cat >>confdefs.h <<_ACEOF
 #define DEFAULT_EMIT_SYSV_HASH $ac_default_emit_sysv_hash
diff --git a/ld/configure.ac b/ld/configure.ac
index ee62d10ac5..30e9a9fda8 100644
--- a/ld/configure.ac
+++ b/ld/configure.ac
@@ -186,6 +186,17 @@ AC_ARG_ENABLE(separate-code,
   no) ac_default_ld_z_separate_code=0 ;;
 esac])
 
+# Decide if -z prefer-min-page-size should be enabled in ELF linker by
+# default.
+ac_default_ld_z_prefer_min_page_size=unset
+AC_ARG_ENABLE(prefer-min-page-size,
+	      AS_HELP_STRING([--enable-prefer-min-page-size],
+	      [enable -z prefer-min-page-size in ELF linker by default]),
+[case "${enableval}" in
+  yes) ac_default_ld_z_prefer_min_page_size=1 ;;
+  no) ac_default_ld_z_prefer_min_page_size=0 ;;
+esac])
+
 # Decide which "--hash-style" to use by default
 # Provide a configure time option to override our default.
 AC_ARG_ENABLE([default-hash-style],
@@ -449,6 +460,9 @@ fi
 AC_DEFINE_UNQUOTED(DEFAULT_LD_Z_SEPARATE_CODE,
   $ac_default_ld_z_separate_code,
   [Define to 1 if you want to enable -z separate-code in ELF linker by default.])
+AC_DEFINE_UNQUOTED(DEFAULT_LD_Z_PREFER_MIN_PAGE_SIZE,
+  $ac_default_ld_z_prefer_min_page_size,
+  [Define to 1 if you want to enable -z prefer-min-page-size in ELF linker by default.])
 
 AC_DEFINE_UNQUOTED([DEFAULT_EMIT_SYSV_HASH],
   [$ac_default_emit_sysv_hash],
diff --git a/ld/configure.tgt b/ld/configure.tgt
index e92d4484b4..f9453438ea 100644
--- a/ld/configure.tgt
+++ b/ld/configure.tgt
@@ -859,11 +859,15 @@ frv-*-* | hppa*-*-* | ia64-*-* | mips*-*-*)
   ;;
 esac
 
-# Enable -z separate-code by default for Linux/x86.
+# Enable -z separate-code and -z prefer-min-page-size by default for
+# Linux/x86.
 case "${target}" in
 i[3-7]86-*-linux-* | x86_64-*-linux-*)
   if test ${ac_default_ld_z_separate_code} = unset; then
     ac_default_ld_z_separate_code=1
   fi
+  if test ${ac_default_ld_z_prefer_min_page_size} = unset; then
+    ac_default_ld_z_prefer_min_page_size=1
+  fi
   ;;
 esac
diff --git a/ld/emultempl/elf32.em b/ld/emultempl/elf32.em
index 3e8ee4693e..6b38bcf219 100644
--- a/ld/emultempl/elf32.em
+++ b/ld/emultempl/elf32.em
@@ -106,6 +106,7 @@ gld${EMULATION_NAME}_before_parse (void)
   link_info.check_relocs_after_open_input = TRUE;
   link_info.relro = DEFAULT_LD_Z_RELRO;
   link_info.separate_code = DEFAULT_LD_Z_SEPARATE_CODE;
+  link_info.prefer_min_page_size = DEFAULT_LD_Z_PREFER_MIN_PAGE_SIZE;
 }
 
 EOF
@@ -2970,6 +2971,10 @@ fragment <<EOF
 	link_info.separate_code = TRUE;
       else if (strcmp (optarg, "noseparate-code") == 0)
 	link_info.separate_code = FALSE;
+      else if (strcmp (optarg, "prefer-min-page-size") == 0)
+	link_info.prefer_min_page_size = TRUE;
+      else if (strcmp (optarg, "noprefer-min-page-size") == 0)
+	link_info.prefer_min_page_size = FALSE;
       else if (strcmp (optarg, "common") == 0)
 	link_info.elf_stt_common = elf_stt_common;
       else if (strcmp (optarg, "nocommon") == 0)
diff --git a/ld/lexsup.c b/ld/lexsup.c
index dacb9623b4..7375df8dac 100644
--- a/ld/lexsup.c
+++ b/ld/lexsup.c
@@ -1820,6 +1820,17 @@ elf_shlib_list_options (FILE *file)
   -z separate-code            Create separate code program header\n"));
   fprintf (file, _("\
   -z noseparate-code          Don't create separate code program header (default)\n"));
+#endif
+#if DEFAULT_LD_Z_PREFER_MIN_PAGE_SIZE
+  fprintf (file, _("\
+  -z prefer-min-page-size     Prefer minimum page size (default)\n"));
+  fprintf (file, _("\
+  -z noprefer-min-page-size   Don't prefer minimum page size\n"));
+#else
+  fprintf (file, _("\
+  -z prefer-min-page-size     Prefer minimum page size\n"));
+  fprintf (file, _("\
+  -z noprefer-min-page-size   Don't prefer minimum page size (default)\n"));
 #endif
   fprintf (file, _("\
   -z common                   Generate common symbols with STT_COMMON type\n"));
-- 
2.20.1

