# .Sanitize for devo/gdb.

# Each directory to survive its way into a release will need a file
# like this one called "./.Sanitize".  All keyword lines must exist,
# and must exist in the order specified by this file.  Each directory
# in the tree will be processed, top down, in the following order.

# Hash started lines like this one are comments and will be deleted
# before anything else is done.  Blank lines will also be squashed
# out.

# The lines between the "Do-first:" line and the "Things-to-keep:"
# line are executed as a /bin/sh shell script before anything else is
# done in this directory.

Do-first:

mpw_files="mpw-config.in mpw-make.in ser-mac.c mac-xdep.c mac-defs.h macgdb.r ChangeLog.mpw"

if ( echo $* | grep keep\-mpw > /dev/null ) ; then
	keep_these_too="${mpw_files} ${keep_these_too}"
	if [ -n "${verbose}" ] ; then
		echo Keeping ${mpw_files}
	fi
else
	lose_these_too="${mpw_files} ${lose_these_too}"
	if [ -n "${verbose}" ] ; then
		echo Deleting ${mpw_files}
	fi
fi

gdbtk_files="gdbtk.c gdbtk.tcl"

if ( echo $* | grep keep\-gdbtk > /dev/null ) ; then
	keep_these_too="${gdbtk_files} ${keep_these_too}"
	if [ -n "${verbose}" ] ; then
		echo Keeping ${gdbtk_files}
	fi
else
	lose_these_too="${gdbtk_files} ${lose_these_too}"
	if [ -n "${verbose}" ] ; then
		echo Deleting ${gdbtk_files}
	fi
fi

# All files listed between the "Things-to-keep:" line and the
# "Files-to-sed:" line will be kept.  All other files will be removed.
# Directories listed in this section will have their own Sanitize
# called.  Directories not listed will be removed in their entirety
# with rm -rf.

Things-to-keep:

.gdbinit
29k-share
COPYING
ChangeLog
ChangeLog-3.x
ChangeLog-9091
ChangeLog-92
ChangeLog-93
ChangeLog-94
Makefile.in
NEWS
README
TODO
a29k-tdep.c
a68v-nat.c
alpha-nat.c
alpha-tdep.c
altos-xdep.c
annotate.c
annotate.h
arm-convert.s
arm-tdep.c
arm-xdep.c
array-rom.c
blockframe.c
breakpoint.c
breakpoint.h
buildsym.c
buildsym.h
c-exp.y
c-lang.c
c-lang.h
c-typeprint.c
c-valprint.c
call-cmds.h
ch-exp.y
ch-lang.c
ch-lang.h
ch-typeprint.c
ch-valprint.c
coff-solib.c
coff-solib.h
coffread.c
command.c
command.h
complaints.c
complaints.h
config
configure.in
convex-tdep.c
convex-xdep.c
copying.awk
copying.c
core-sol2.c
core-svr4.c
core.c
coredep.c
corelow.c
cp-valprint.c
cxux-nat.c
dbxread.c
dcache.c
dcache.h
defs.h
delta68-nat.c
demangle.c
doc
dpx2-nat.c
dst.h
dstread.c
dwarfread.c
elfread.c
environ.c
environ.h
eval.c
exec.c
expprint.c
expression.h
f-exp.y
f-lang.c
f-lang.h
f-typeprint.c
f-valprint.c
findvar.c
fork-child.c
frame.h
gcc.patch
gdb-stabs.h
gdb.1
gdba.el
gdbcmd.h
gdbcore.h
gdbserver
gdbtypes.c
gdbtypes.h
go32-xdep.c
gould-tdep.c
gould-xdep.c
h8300-tdep.c
h8500-tdep.c
hp300ux-nat.c
hppa-tdep.c
hppab-nat.c
hppah-nat.c
hpread.c
i386-stub.c
i386-tdep.c
i386aix-nat.c
i386b-nat.c
i386ly-tdep.c
i386m3-nat.c
i386mach-nat.c
i386v-nat.c
i386v4-nat.c
i387-tdep.c
i960-tdep.c
infcmd.c
inferior.h
inflow.c
infptrace.c
infrun.c
inftarg.c
irix4-nat.c
irix5-nat.c
isi-xdep.c
kdb-start.c
language.c
language.h
lynx-nat.c
m2-exp.y
m2-lang.c
m2-lang.h
m2-typeprint.c
m2-valprint.c
m3-nat.c
m68k-stub.c
m68k-tdep.c
m88k-nat.c
m88k-tdep.c
main.c
maint.c
mdebugread.c
mem-break.c
minimon.h
minsyms.c
mips-nat.c
mips-tdep.c
mipsm3-nat.c
mipsv4-nat.c
mipsread.c
monitor.h
monitor.c
news-xdep.c
nindy-share
nindy-tdep.c
nlm
nlmread.c
nlmstub.def
ns32k-tdep.c
ns32km3-nat.c
objfiles.c
objfiles.h
op50-rom.c
os9kread.c
osfsolib.c
parse.c
parser-defs.h
partial-stab.h
printcmd.c
procfs.c
ptx4-nat.c
pyr-tdep.c
pyr-xdep.c
regex.c
regex.h
rem-multi.shar
remote-adapt.c
remote-bug.c
remote-e7000.c
remote-eb.c
remote-es.c
remote-est.c
remote-hms.c
remote-mips.c
remote-mm.c
remote-nindy.c
remote-os9k.c
remote-pa.c
remote-sim.c
remote-sim.h
remote-st.c
remote-udi.c
remote-utils.c
remote-utils.h
remote-vx.c
remote-vx29k.c
remote-z8k.c
remote.c
rs6000-nat.c
rs6000-tdep.c
rom68k-rom.c
saber.suppress
ser-e7kpc.c
ser-go32.c
ser-tcp.c
ser-unix.c
serial.c
serial.h
sh-tdep.c
signals.h
solib.c
solib.h
somread.c
somsolib.c
somsolib.h
source.c
sp64-tdep.c
sparc-nat.c
sparc-stub.c
sparc-tdep.c
sparcl-stub.c
sparcl-tdep.c
sparclite
stabsread.c
stabsread.h
stack.c
standalone.c
stop-gdb.c
stuff.c
sun3-nat.c
sun386-nat.c
symfile.c
symfile.h
symm-nat.c
symm-tdep.c
symmisc.c
symtab.c
symtab.h
tahoe-tdep.c
target.c
target.h
terminal.h
testsuite
thread.c
thread.h
top.c
top.h
typeprint.c
typeprint.h
ultra3-nat.c
ultra3-xdep.c
umax-xdep.c
utils.c
valarith.c
valops.c
valprint.c
valprint.h
value.h
values.c
vax-tdep.c
vx-share
w65-tdep.c
w89k-rom.c
xcoffread.c
xcoffsolib.c
xcoffsolib.h
z8k-tdep.c


# Things which are explicitly *not* kept, for now.
# energize		- Part of Lucid support.
# energize-patches	- Part of Lucid support.
# energize.c		- Part of Lucid support.
# energize.h		- Part of Lucid support.
# remote-sa.sparc.c	- Remote target for a standalone SPARC, using
#			  the FORTH console ROMs.  We never got the paperwork
#			  straight, since Sun's lawyers messed with the
#			  FSF contract and RMS didn't accept the changes.
#			  Written at SunLabs.
# state.c		- Not used at the moment, keep for reference (fnf)
# state.h		- Not used at the moment, keep for reference (fnf)

Things-to-lose:

energize
energize-patches
energize.c
energize.h
remote-sa.sparc.c
state.c
state.h

Do-last:

echo Removing traces of \"mpw\"...

# Don't try to clean directories here, as the 'mv' command will fail.
# Also, grep fails on NFS mounted directories.
if ( echo $* | grep keep\-mpw > /dev/null ) ; then
	for i in * ; do
		if test ! -d $i && (grep sanitize-mpw $i > /dev/null) ; then
			echo Keeping mpw stuff in $i
		fi
	done
else
	for i in * ; do
		if test ! -d $i && (grep sanitize-mpw $i > /dev/null) ; then
			echo Removing traces of \"mpw\" out of $i...
			cp $i new
			sed '/start\-sanitize\-mpw/,/end-\sanitize\-mpw/d' < $i > new
			if [ -n "${safe}" -a ! -f .Recover/$i ] ; then
				echo Caching $i in .Recover...
				mv $i .Recover
			fi
			mv new $i
		fi
	done
fi

echo Catering to RMS by removing traces of \"gdbtk\"...

# Don't try to clean directories here, as the 'mv' command will fail.
# Also, grep fails on NFS mounted directories.
if ( echo $* | grep keep\-gdbtk > /dev/null ) ; then
	for i in * ; do
		if test ! -d $i && (grep sanitize-gdbtk $i > /dev/null) ; then
			echo Keeping gdbtk stuff in $i
		fi
	done
else
	for i in * ; do
		if test ! -d $i && (grep sanitize-gdbtk $i > /dev/null) ; then
			echo Removing traces of \"gdbtk\" out of $i...
			cp $i new
			sed '/start\-sanitize\-gdbtk/,/end-\sanitize\-gdbtk/d' < $i > new
			if [ -n "${safe}" -a ! -f .Recover/$i ] ; then
				echo Caching $i in .Recover...
				mv $i .Recover
			fi
			mv new $i
		fi
	done
fi

r16_files="configure.in"

if ( echo $* | grep keep\-r16 > /dev/null ) ; then
	for i in $r16_files ; do
		if test ! -d $i && (grep sanitize-r16 $i > /dev/null) ; then
			if [ -n "${verbose}" ] ; then
				echo Keeping r16 stuff in $i
			fi
		fi
	done
else
	for i in $r16_files ; do
		if test ! -d $i && (grep sanitize-r16 $i > /dev/null) ; then
			if [ -n "${verbose}" ] ; then
				echo Removing traces of \"r16\" from $i...
			fi
			cp $i new
			sed '/start\-sanitize\-r16/,/end-\sanitize\-r16/d' < $i > new
			if [ -n "${safe}" -a ! -f .Recover/$i ] ; then
				if [ -n "${verbose}" ] ; then
					echo Caching $i in .Recover...
				fi
				mv $i .Recover
			fi
			mv new $i
		fi
	done
fi

for i in * ; do
	if test ! -d $i && (grep sanitize $i > /dev/null) ; then
		echo '***' Some mentions of Sanitize are still left in $i! 1>&2
	fi
done

#
# End of file.
