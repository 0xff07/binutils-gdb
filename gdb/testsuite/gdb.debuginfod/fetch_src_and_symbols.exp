# Copyright 2010-2019 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# test debuginfod functionality

standard_testfile 

# skip testing if debuginfod cannot be found
if { [which debuginfod] == 0 } {
    untested "cannot find debuginfod"
    return -1
}

# skip testing if gdb was not configured with debuginfod
if { [string first "with-debuginfod" [exec $GDB --configuration]] == -1 } {
    untested "gdb not configured with debuginfod"
    return -1
}

set cache [file join [standard_output_file {}] ".client_cache"]

# make sure there isn't an old client cache lying around
file delete -force $cache

# make a copy source file that we can move around
if { [catch {file copy -force ${srcdir}/${subdir}/${srcfile} \
                              [standard_output_file tmp-${srcfile}]}] != 0 } { 
    error "Could not create temporary file"
    return -1
}

set sourcetmp [standard_output_file tmp-${srcfile}]
set outputdir [standard_output_file {}]

if { [gdb_compile "${sourcetmp}" "${binfile}" executable {debug}] != "" } {
    return -1
}

set port 58002
set ::env(DEBUGINFOD_URLS) "localhost:$port"
set ::env(DEBUGINFOD_TIMEOUT) 10
set ::env(DEBUGINFOD_CACHE_PATH) $cache

# test that gdb cannot find source without debuginfod
gdb_start
gdb_load $binfile
gdb_test_no_output "set substitute-path $outputdir /dev/null" 
gdb_test "l" ".*Connection refused.*"
gdb_exit

# strip symbols into separate file and move it so gdb cannot find it without debuginfod
gdb_gnu_strip_debug $binfile

set debugdir [file join [standard_output_file {}] "debug"]
set debuginfo [file join [standard_output_file {}] "fetch_src_and_symbols.debug"]

file mkdir -force $debugdir
file copy -force $debuginfo $debugdir
file delete -force $debuginfo

# test that gdb cannot find symbols without debuginfod
gdb_start
gdb_load $binfile
gdb_test "file" ".*No symbol file.*"
gdb_exit

# start up debuginfod

set debuginfod_pid [exec debuginfod -p $port -F $debugdir >/dev/null 2>&1 &]
sleep 5

# gdb should now be able to find the symbol and source files
gdb_start
gdb_load $binfile
gdb_test_no_output "set substitute-path $outputdir /dev/null" 
gdb_test "br main" "Breakpoint 1 at.*file.*"
gdb_test "l" "int main().*return 0;.*"
gdb_exit

file delete -force $cache
exec kill $debuginfod_pid
