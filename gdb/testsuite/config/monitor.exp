# Test Framework Driver for GDB driving a ROM monitor (via monitor.c).
#   Copyright 1995 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

load_lib gdb.exp

#
# gdb_target_monitor
# Set gdb to target the monitor
#
proc gdb_target_monitor { } {
    global gdb_prompt
    global exit_status
    global timeout

    set timeout 60

    verbose "Timeout is now $timeout seconds" 2
    if [target_info exists gdb_protocol] {
	set targetname "[target_info gdb_protocol]"
    } else {
	perror "No protocol specified for [target_info name].";
	return -1;
    }
    if [target_info exists baud] {
	send_gdb "set remotebaud [target_info baud]\n"
    }
    if [target_info exists netport] {
	set serialport "[target_info netport]"
    } else {
	set serialport "[target_info serial]"
    }

    for {set j 1} {$j <= 2} {incr j} {
	for {set i 1} {$i <= 3} {incr i} {
	    send_gdb "target $targetname $serialport\n"
	    expect {
		-re "Remote MIPS debugging.*" {
		    verbose "Set target to $targetname"
		    return
		}
		-re "Remote debugging using $serialport.*" {
		    verbose "Set target to $targetname"
		    return
		}
		-re "Remote target $targetname connected to.*"	{
		    verbose "Set target to $targetname"
		    return
		}
		-re "Connection refused" {
		    verbose "Connection refused by remote target.  Pausing, and trying again."
		    sleep 30
		    continue
		}
		timeout { 
		    break
		}
	    }
	}
	if { $j == 1 && ![reboot_target] } {
	    break;
	}
    }

    perror "Couldn't set target for $targetname, port is $serialport."
    cleanup
    exit $exit_status
}

#
# gdb_load -- load a file into the debugger.
#             return a -1 if anything goes wrong.
#
proc gdb_load { arg } {
    global verbose
    global loadpath
    global loadfile
    global GDB
    global gdb_prompt
    global timeout

    if { $arg != "" } {
	if [gdb_file_cmd $arg] { return -1 }
    }

    gdb_target_monitor

    if [is_remote host] {
	# FIXME:
	set arg a.out;
    }

    verbose "Loading $arg"
    send_gdb "load $arg\n"
    set timeout 1000
    verbose "Timeout is now $timeout seconds" 2
    expect {
	-re ".*$gdb_prompt $" {
	    if { $verbose > 1 } {
		send_user "Loaded $arg into $GDB\n"
	    }
	    return 1
	}
	-re "$gdb_prompt $"     {
	    if { $verbose > 1 } {
		perror "GDB couldn't load."
	    }
	}
	timeout {
	    if { $verbose > 1 } {
		perror "Timed out trying to load $arg."
	    }
	}
    }
}

proc gdb_start { } {
    global timeout
    global reboot

    # reboot the board to get a clean start
    if $reboot then {
	reboot_target;
    }
    catch default_gdb_start;

    set timeout 10
    verbose "Timeout is now $timeout seconds" 2
}
