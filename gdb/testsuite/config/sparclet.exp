#   Copyright (C) 1996 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# Please email any bugs, comments, and/or additions to this file to:
# DejaGnu@cygnus.com

# This file was written by Michael Snyder <msnyder@cygnus.com>.

# GDB support routines for a board using the sparclet remote debugging
# protocol.

load_lib remote.exp
load_lib gdb.exp
set prompt "\\(gdbslet\\)"


#
# Sparclet remote run command.
#
# This requires that we beep the user and ask him to push the board reset!
# Then we will switch to the monitor target, run the program, use 2 ^C's
# to interrupt the monitor target, and switch back to the remote target.
# Then we have to do a continue to get past the stub breakpoint.
#

proc gdb_start { } {
    global gdb_spawn_id;
    global prompt
    global GDB

    if { [default_gdb_start] != 0 } {
	return -1;
    }

    if [target_info exists baud] {
	send_gdb "set remotebaud [target_info baud]\n"
	expect {
	    -i $gdb_spawn_id -re ".*$prompt" { }
	    -i $gdb_spawn_id default { 
		perror "Error setting baud rate."
		return -1;
	    }
	}
    }

    for {set x 1;} { $x < 4 } {incr x} {
	if { [gdb_sparclet_startup] > 0 } {
	    break;
	}
	reboot_target;
    }
    return 1;
}

proc gdb_sparclet_startup { } {
    global gdb_spawn_id;
    global prompt
    global GDB

    set timeout 5;
    set is_running_stub 0;

    send_gdb "target sparclet [target_info serial]\n";
    expect {
	-i $gdb_spawn_id -re ".*already.*y or n." {
	    gdb_send "y\n";
	    exp_continue;
	}
	-i $gdb_spawn_id -re "Remote target.*connected to.*$prompt" { }
	-i $gdb_spawn_id timeout {
	    verbose "timed out, checking if stub is already running"
	    set timeout 10
	    send_gdb "\003";
	    expect {
		-i $gdb_spawn_id -re ".*$prompt" {
		}
		-i $gdb_spawn_id default {
		    perror "sparclet board isn't responding";
		    return -1;
		}
	    }
	    send_gdb "target remote [target_info gdb_serial]\n";
	    expect {
		-i $gdb_spawn_id -re ".*Remote debugging.*$prompt" {
		    verbose "stub is already running"
		    set is_running_stub 1;
		}
		-i $gdb_spawn_id default {
		    perror "sparclet board isn't responding";
		    return -1;
		}
	    }
	}
    }

    if { $is_running_stub == 0 } {
	global srcdir

	if ![file exists loader] {
	    set result [target_compile "${srcdir}/config/sparclet-loader.c" "loader" executable "libs=-Wl,-Ttext,[target_info gdb_stub_offset]"];
	}
	set loader "loader";
	send_gdb "file $loader\n";
	expect {
	    -i $gdb_spawn_id -re "A program is being debug.*Kill it.*y or n. $" {
		send_gdb "y\n"
		exp_continue
	    }
	    -i $gdb_spawn_id -re "Load new symbol table.*y or n. $" {
		send_gdb "y\n"
		exp_continue
	    }
	    -i $gdb_spawn_id -re "Reading symbols from.*done..*$prompt $" {}
	    -i $gdb_spawn_id -re "$prompt $" { perror "GDB couldn't find loader" }
	    -i $gdb_spawn_id timeout { 
		perror "(timeout) read symbol file" ; 
		return -1
	    }
	}

	send_gdb "target [target_info gdb_protocol] [target_info serial]\n";
	expect {
	    -i $gdb_spawn_id -re "Remote target.*connected to.*$prompt" { }
	    -i $gdb_spawn_id default {
		perror "Error reconnecting to sparclet.";
		return -1;
	    }
	}

	send_gdb "load $loader [target_info gdb_stub_offset]\n"
	verbose "Loading $loader into $GDB" 2
	set timeout 1200
	verbose "Timeout is now $timeout seconds" 2
	expect {
	    -i $gdb_spawn_id -re "Loading.*$prompt $" {
		verbose "Loaded $loader into $GDB" 1
		set timeout 60
		verbose "Timeout is now $timeout seconds" 2
	    }
	    -i $gdb_spawn_id -re "$prompt $"     {
		if $verbose>1 then {
		    perror "GDB couldn't load."
		}
	    }
	    -i $gdb_spawn_id timeout {
		if $verbose>1 then {
		    perror "Timed out trying to load $arg."
		}
	    }
	}

	send_gdb "run\n";
	expect {
	    -i $gdb_spawn_id -re "A program is being debug.*Kill it.*y or n. $" {
		send_gdb "y\n"
		exp_continue
	    }
	    -i $gdb_spawn_id -re "The program being debugged .*y or n. $" {
		send_gdb "y\n"
		exp_continue
	    }
	    -i $gdb_spawn_id -re ".*Starting program:.*loader.*$" { 
		verbose "Starting loader succeeded" 
	    }
	    -i $gdb_spawn_id timeout { 
		perror "(timeout) starting the loader" ; 
		return -1 
	    }
	    -i $gdb_spawn_id default {
		perror "error starting the loader";
	    }
	}
	sleep 2;
	send_gdb ""
	sleep 1;
	send_gdb ""
	verbose "Sent ^C^C"
	expect {
	    -i $gdb_spawn_id -re ".*Give up .and stop debugging it.*$" {
		send_gdb "y\n"
		exp_continue
	    }
	    -i $gdb_spawn_id -re ".*$prompt $" { 
		verbose "Running loader succeeded" 
	    }
	    -i $gdb_spawn_id timeout { 
		perror "(timeout) interrupting the loader" ;
		return -1 
	    }
	    -i $gdb_spawn_id default {
		perror "error interrupting the loader";
	    }
	}

	gdb_exit;
	return [gdb_start];
    }
    return 1;
}

proc gdb_run_cmd { args } {
    global gdb_spawn_id
    global prompt

    gdb_breakpoint exit;
    send_gdb "set \$fp=0\n";
    expect {
	-i $gdb_spawn_id -re ".*$prompt" { }
    }
    send_gdb "jump start\n";
    expect {
	-i $gdb_spawn_id -re ".*y or n. $" {
	    send_gdb "y\n"
	}
	-i $gdb_spawn_id -re "Continuing at.*\[\r\n\]" { }
	-i $gdb_spawn_id default {
	    return "failed"
	}
    }
    return "";
}


#
# gdb_load -- load a file into the GDB. 
#             Returns a 0 if there was an error,
#                       1 if it load successfully.
#
proc gdb_load { arg } {
    global verbose
    global loadpath
    global loadfile
    global prompt
    global GDB
    global expect_out
    global gdb_spawn_id

    set loadfile [file tail $arg]
    set loadpath [file dirname $arg]

    if [target_info exists gdb_protocol] {
	set protocol [target_info gdb_protocol];
    } else {
	set protocol "sparclet"
    }

    send_gdb "file $arg\n"
    expect {
	-i $gdb_spawn_id -re "A program is being debug.*Kill it.*y or n. $" {
	    send_gdb "y\n"
	    exp_continue
	}
        -i $gdb_spawn_id -re "Load new symbol table.*y or n. $" {
	    send_gdb "y\n"
	    exp_continue
	}
	-i $gdb_spawn_id -re "Reading symbols from.*done..*$prompt $" {}
	-i $gdb_spawn_id -re "$prompt $" { perror "GDB couldn't read file" }
	-i $gdb_spawn_id timeout { 
	    perror "(timeout) read symbol file" ; 
	    return -1 
	}
    }

    if [target_info exists gdb_serial] {
	send_gdb "target remote [target_info gdb_serial]\n"
	expect {
	    -i $gdb_spawn_id -re ".*Kill it?.*y or n.*" {
		send_gdb "y\n";
		exp_continue
	    }
	    -i $gdb_spawn_id -re ".*$prompt $"	{
		verbose "Set remote target to [target_info serial]" 2
	    }
	    -i $gdb_spawn_id timeout { 
		set timeout 10
		verbose "Timeout is now $timeout seconds" 2
		perror "Couldn't set remote target."
		return -1
	    }
	}
    }
    if [target_info exists gdb_load_offset] {
	set offset "[target_info gdb_load_offset]";
    } else {
	set offset "";
    }
    send_gdb "load $arg $offset\n"
    verbose "Loading $arg into $GDB" 2
    set timeout 1200
    verbose "Timeout is now $timeout seconds" 2
    expect {
	-i $gdb_spawn_id -re "Loading.*$prompt $" {
	    verbose "Loaded $arg into $GDB" 1
	    set timeout 60
	    verbose "Timeout is now $timeout seconds" 2
	}
	-i $gdb_spawn_id -re "$prompt $"     {
	    if $verbose>1 then {
		perror "GDB couldn't load."
	    }
	}
	-i $gdb_spawn_id timeout {
	    if $verbose>1 then {
		perror "Timed out trying to load $arg."
	    }
	}
    }
    send_gdb "list main\n";
    expect {
	-i $gdb_spawn_id -re ".*$prompt" { }
	-i $gdb_spawn_id default {
	    perror "command for list main never completed";
	    return -1;
	}
    }

    return 0
}
