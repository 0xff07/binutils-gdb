#   Copyright (C) 1988, 1990, 1991, 1992 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

# Please email any bugs, comments, and/or additions to this file to:
# DejaGnu@cygnus.com

# This file was written by Rob Savoye. (rob@cygnus.com)

#
# load support libraries
#
load_lib remote.exp
set shell_prompt "->"

# these need to be initialized only if site.exp doesn't set them
if ![info exists prompt] then {
    set prompt "\(vxgdb\)"
}

#
# gdb_version -- extract and print the version number of gcc
#
proc gdb_version {} {
    global GDB
    global GDBFLAGS
    global prompt
    set tmp [exec echo "q" | $GDB]
    set version [lindex $tmp [lsearch $tmp "\[0-9\]*"]]
    set version [string range $version 0 [expr [string length $version]-2]]
    clone_output "[which $GDB] version $version $GDBFLAGS\n"
}

#
# gdb_load -- load a file into the debugger.
# We have to stop and start gdb each time we do this, because when
# vxgdb loads two files in a row, the symbols in the first file loaded
# take precedence.
#
proc gdb_load { arg } {
    global shell_id
    global verbose
    global loadpath
    global loadfile
    global base_dir
    global prompt
    global GDB
    quit_vxgdb
    spawn_vxgdb
    set loadfile [file tail $arg]
    set loadpath [file dirname $arg]
    send -i $shell_id cd \"$base_dir\"\n
    expect {
	-i $shell_id "value = 0 = 0x0" {
	    if $verbose>1 then {
		send_user "VxWorks changed directory to $base_dir\n"
	    }
	}
	timeout		{ error "Couldn't load $arg into $GDB."; return }
    }
    send "load $arg\n"
    # Use a very generous timeout because we might be loading across
    # the Internet.
    set timeout 600
    expect {
	-re "load.*done.*$prompt $" {
	    if $verbose>1 then {
		send_user "Loaded $arg\n"
	    }
	}
	-i $shell_id "Login incorrect." {
	    error "Login is incorrect."; set timeout 10; return
	}
	-re "Load failed on target machine.*$prompt $"	{
	    error "Couldn't load $arg."; set timeout 10; return
	}
	-re "No such file or directory.*$prompt $" {
	    error "$arg doesn't exist."; set timeout 10; return
	}
	-re ".*Reading symbols.*done..*$prompt $" {
	    if $verbose>1 then {
		send_user "Loaded $arg\n"
	    }
	}
	-re "$prompt $" {
	    error "Couldn't load $arg."; set timeout 10; return
	}
	timeout {
	    error "(timeout) couldn't load $arg.";
	    set timeout 10
	    return
	 }
    }
    set timeout 10
}

#
# 
#
proc gdb_exit {} {
    global shell_id

    exit_remote_shell $shell_id
    quit_vxgdb
}

proc quit_vxgdb { } {
    global GDB
    global GDBFLAGS
    global verbose

    set timeout 1
    send "quit\n"
    expect {
	eof                 { 
	    if $verbose>1 then {
		send_user "Got EOF from $GDB\n"
	    }
	}
	timeout             { 
	    if $verbose>1 then {
		send_user "Got TIMEOUT from $GDB\n"
	    }
	}
	-re "The program is running.  Quit anyway? (y or n) $"\
	    { send "y\n"
		if $verbose>1 then {
		    send_user "\t\tKilling program being debugged\n"
		}
	    }
    }
    if $verbose>1 then {
	send_user "Quitting $GDB $GDBFLAGS\n"
    }
}

#
# gdb_start -- start gdb running and 
#
proc gdb_start { } {
    global GDB
    global GDBFLAGS
    global spawn_id
    global prompt
    global verbose
    global targetname
    global connectmode
    global reboot
    global shell_id

    # get a connection to the board
    set shell_id [ eval $connectmode "$targetname" ]
    if $shell_id<0 then {
	error "Couldn't connect to $targetname."
	return -1
    }

    # reboot vxworks to get a clean start
    if $reboot then {
	send_user "Rebooting VxWorks, Please wait...\n"

	send -i $shell_id "\CX"
	set timeout 120
	expect {
	    -i $shell_id -re "Connection closed.*$" {
		if $verbose>2 then {
		    send_user "\nVxWorks has closed the shell\n"
		}
	    }
	    eof         { error "(eof) never disconnected from VxWorks shell."; alldone }
	    timeout     { error "(timeout) never disconnected from VxWorks shell."; alldone }
	}
	close -i $shell_id

	exec sleep 30

	set timeout 60
	set shell_id [ eval $connectmode "$targetname" ]
	if $shell_id<0 then {
	    error "Couldn't connect to $targetname."
	}
    }
    set timeout 10

    # this is the non-interactive version of nfsAuthUnixPrompt
    #send -i $shell_id nfsAuthUnixSet ($vx_host, $vx_uid, $vx_gid, 0); \n
    #expect {
    #    -i $shell_id "value = 0 = 0x0" {
    #	if $verbose>1 then {
    #	    send_user "\nVxWorks set host=$vx_host, uid=$vx_uid, gid=$vx_gid\n"
    #	}
    #    }
    #    timeout		{ error "couldn't set host=$vx_host, uid=$vx_uid, gid=$vx_gid\n"; alldone }
    #}

    #send -i $shell_id cd \"$base_dir\"\n
    #expect {
    #    -i $shell_id "value = 0 = 0x0" {
    #	if $verbose>1 then {
    #	    send_user "VxWorks changed directory to $base_dir\n"
    #	}
    #    }
    #    timeout		{ error "couldn't load $arg into $bin."; alldone }
    #}

    spawn_vxgdb
}

proc spawn_vxgdb { } {
    global GDB
    global GDBFLAGS
    global spawn_id
    global prompt
    global verbose
    global targetname

    # start GDB
    if [ llength $GDBFLAGS ] then {
	spawn $GDB $GDBFLAGS
    } else {
	spawn $GDB
    }
    expect  {
	-re ".*$prompt $"   {
	    if $verbose>1 then {
		send_user "$GDB initialized for cross mode to Vxworks\n\n"
	    }
	}
	-re "$prompt $"     { error "GDB never initialized."; alldone }
	timeout             { error "(timeout) GDB never initialized.";
	    alldone }
    }

    # force the height to "unlimited", so no pagers get used
    send "set height 0\n"
    expect -re ".*$prompt $" {}
    # force the width to "unlimited", so no wraparound occurs
    send "set width 0\n"
    expect -re ".*$prompt $" {}
    # set the default arguments to "main", so that "run" with no
    # arguments will work correctly.
    send "set args main\n"
    expect -re ".*$prompt $" {}

    if $verbose>1 then {
	send_user "Setting up target, Please wait...\n"
    }
    # set targets hostname
    send "target vxworks $targetname\n"
    set timeout 60
    expect {
	-re "Done\..*$prompt $"	{
	    if $verbose>1 then {
		send_user "Set target to $targetname\n"
	    }
	}
	-re "net_connect: RPC: Program not registered.*$" {
	    error "Couldn't set GDB to target $targetname."
	    exit 1
	}
	timeout { 
	    error "Couldn't set target for vxworks."
	    set timeout 10
	    alldone
	}
    }
    set timeout 10
}

expect_after {
    "<return>"		   { send "\n"; error "Window too small." }
    -re "\(y or n\) " 	   { send "n\n"; error "Got interactive prompt." }
    buffer_full		   { error "internal buffer is full." }
    eof			   { error "eof -- pty is hosed." }
    timeout			   { error "timeout." }
    "virtual memory exhausted" { error "virtual memory exhausted." }
    "Undefined command"	   { error "send string probably wrong." }
}

load_lib gdb.exp

gdb_start

# make sure gdb has actually started, otherwise if the first test
# timesout, DejaGnu crashes
send "\n"
expect {
    -re "$prompt"
    }
