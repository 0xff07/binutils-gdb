# Copyright (C) 1992, 1993, 1994, 1995 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@prep.ai.mit.edu

# This file was written by Fred Fish. (fnf@cygnus.com)

if $tracelevel then {
	strace $tracelevel
}

set prms_id 0
set bug_id 0

# are we on a target board
if ![isnative] then {
    return
}

set testfile "coremaker"
set srcfile ${srcdir}/${subdir}/${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}
if  { [compile "${srcfile} -g -o ${binfile}"] != "" } {
    perror "Couldn't compile ${srcfile}"
    return -1
}

execute_anywhere "rm -f ${binfile}.ci"
if  { [compile "-E ${srcdir}/${subdir}/compiler.c > ${binfile}.ci"] != "" } {
    perror "Couldn't make ${testfile}.ci file"
    return -1
}

if ![file exists ${objdir}/${subdir}/corefile] then {
    # Create a core file named "corefile" rather than just "core", to
    # avoid problems with sys admin types that like to regularly prune all
    # files named "core" from the system.
    #
    # Some systems append "core" to the name of the program; others append
    # the name of the program to "core".
    set found 0
    catch "system \"cd ${objdir}/${subdir}; ${binfile}\""
    #    execute_anywhere "./${binfile}"
    foreach i "${objdir}/${subdir}/core ${objdir}/${subdir}/core.coremaker.c ${binfile}.core" {
	set exec_output [execute_anywhere "ls $i"]
	if [ regexp "No such file or directory" ${exec_output} ] {
	    continue
	} else {
	    execute_anywhere "mv $i ${objdir}/${subdir}/corefile"
	    set found 1
	}
	if { $found == 0 } {
	    warning "can't generate a core file - core tests suppressed - check ulimit -c"
	    return 0
	}
    }
}

#
# Test that we can simply startup with a "-core=corefile" command line arg
# and recognize that the core file is a valid, usable core file.
# To do this, we must shutdown the currently running gdb and restart
# with the -core args.  We can't use gdb_start because it looks for
# the first gdb prompt, and the message we are looking for occurs
# before the first prompt.  Also, we can't include GDBFLAGS because
# if it is empty, this confuses gdb with an empty argument that it
# grumbles about (said grumbling currently being ignored in gdb_start).
# **FIXME**
#

gdb_exit
if $verbose>1 then {
    send_user "Spawning $GDB -nw $GDBFLAGS -core=$objdir/$subdir/corefile\n"
}

set oldtimeout $timeout
set timeout [expr "$timeout + 60"]
eval "spawn $GDB -nw $GDBFLAGS -core=$objdir/$subdir/corefile"
expect {
    -re "Core was generated by .*coremaker.*\r
\#0  .*\(\).*\r
$prompt $"			{ pass "args: -core=corefile" }
	-re ".*$prompt $"	{ fail "args: -core=corefile" }
	timeout 		{ fail "(timeout) starting with -core" }
}


#
# Test that startup with both an executable file and -core argument.
# See previous comments above, they are still applicable.
#

gdb_exit
if $verbose>1 then {
    send_user "Spawning $GDB -nw $GDBFLAGS $objdir/$subdir/$binfile -core=$objdir/$subdir/corefile\n"
}


spawn $GDB -nw $GDBFLAGS $objdir/$subdir/$binfile -core=$objdir/$subdir/corefile
expect {
    -re "Core was generated by .*coremaker.*\r
\#0  .*\(\).*\r
$prompt $"			{ pass "args: execfile -core=corefile" }
	-re ".*$prompt $"	{ fail "args: execfile -core=corefile" }
	timeout 		{ fail "(timeout) starting with -core" }
}
set timeout $oldtimeout


# Now restart normally.

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

source gdb.base/coremaker.ci

# Test basic corefile recognition via core-file command.

send "core-file $objdir/$subdir/corefile\n"
expect {
    -re "Core was generated by .*coremaker.*\r
\#0  .*\(\).*\r
$prompt $"			{ pass "core-file command" }
	-re ".*$prompt $"	{ fail "core-file command" }
	timeout 		{ fail "(timeout) core-file command" }
}

# Test correct mapping of corefile sections by printing some variables.

gdb_test "print coremaker_data" "\\\$$decimal = 202"
gdb_test "print coremaker_bss" "\\\$$decimal = 10"
gdb_test "print coremaker_ro" "\\\$$decimal = 201"

# Linux GDB is unable to backtrace properly from an abort system call,
# so trying to access a local variable in the stack fails too.
setup_xfail "i*86-*-linux*" "i*86-*-sysv4*"
gdb_test "print func2::coremaker_local" "\\\$$decimal = {0, 1, 2, 3, 4}"

# Somehow we better test the ability to read the registers out of the core
# file correctly.  I don't think the other tests do this.

# Haven't investigated this xfail
setup_xfail "m68k-*-hpux*" "i*86-*-linux*" "i*86-*-sysv4*"
# Strange that this one depends upon being native compiled.
gdb_test "bt" "abort.*func2.*func1.*main.*" "backtrace in corefile.exp"

# test reinit_frame_cache

gdb_load ${binfile}
setup_xfail "*-*-*"
gdb_test "up" "#\[0-9\]* *\[0-9xa-fH'\]* in .* \\(\\)" "up in corefile.exp"

gdb_test "core" "No core file now."
