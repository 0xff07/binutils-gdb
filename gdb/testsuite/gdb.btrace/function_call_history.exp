# This testcase is part of GDB, the GNU debugger.
#
# Copyright 2013-2014 Free Software Foundation, Inc.
#
# Contributed by Intel Corp. <christian.himpel@intel.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# check for btrace support
if { [skip_btrace_tests] } { return -1 }

# start inferior
standard_testfile
if [prepare_for_testing function_call_history.exp $testfile {} {debug}] {
    return -1
}
if ![runto_main] {
    return -1
}

# start btrace
gdb_test_no_output "record btrace"

# set bp after increment loop and continue
set bp_location [gdb_get_line_number "bp.1" $testfile.c]
gdb_breakpoint $bp_location
gdb_continue_to_breakpoint "cont to $bp_location" ".*$testfile.c:$bp_location.*"

proc rec_fun_all {} {
  gdb_test "record function-call-history 0" [join [list \
    "0\tmain" \
    "1\tinc" \
    "2\tmain" \
    "3\tinc" \
    "4\tmain" \
    "5\tinc" \
    "6\tmain" \
    "7\tinc" \
    "8\tmain" \
    "9\tinc" \
    "10\tmain" \
    "11\tinc" \
    "12\tmain" \
    "13\tinc" \
    "14\tmain" \
    "15\tinc" \
    "16\tmain" \
    "17\tinc" \
    "18\tmain" \
    "19\tinc" \
    "20\tmain"] "\r\n"]
}

# show function call history with unlimited size, we expect to see all 21 entries
gdb_test_no_output "set record function-call-history-size 0"
with_test_prefix "size unlimited" rec_fun_all

# show function call history with size of 21, we expect to see all 21 entries
gdb_test_no_output "set record function-call-history-size 21"
with_test_prefix "size 21" rec_fun_all

# show first 15 entries
gdb_test_no_output "set record function-call-history-size 15"
gdb_test "record function-call-history 0" [join [list \
  "0\tmain" \
  "1\tinc" \
  "2\tmain" \
  "3\tinc" \
  "4\tmain" \
  "5\tinc" \
  "6\tmain" \
  "7\tinc" \
  "8\tmain" \
  "9\tinc" \
  "10\tmain" \
  "11\tinc" \
  "12\tmain" \
  "13\tinc" \
  "14\tmain"] "\r\n"] "forward - 1"

# show last 6 entries
gdb_test "record function-call-history +" [join [list \
  "15\tinc" \
  "16\tmain" \
  "17\tinc" \
  "18\tmain" \
  "19\tinc" \
  "20\tmain"] "\r\n"] "forward - 2"

# moving further should not work
gdb_test "record function-call-history +" "At the end of the branch trace record\\." "forward - 3"

# make sure we cannot move any further a second time
gdb_test "record function-call-history +" "At the end of the branch trace record\\." "forward - 4"

# moving back showing the latest 15 function calls
gdb_test "record function-call-history -" [join [list \
  "6\tmain" \
  "7\tinc" \
  "8\tmain" \
  "9\tinc" \
  "10\tmain" \
  "11\tinc" \
  "12\tmain" \
  "13\tinc" \
  "14\tmain" \
  "15\tinc" \
  "16\tmain" \
  "17\tinc" \
  "18\tmain" \
  "19\tinc" \
  "20\tmain"] "\r\n"] "backward - 1"

# moving further back shows the 6 first function calls
gdb_test "record function-call-history -" [join [list \
  "0\tmain" \
  "1\tinc" \
  "2\tmain" \
  "3\tinc" \
  "4\tmain" \
  "5\tinc"] "\r\n"] "backward - 2"

# moving further back shouldn't work
gdb_test "record function-call-history -" "At the start of the branch trace record\\." "backward - 3"

# make sure we cannot move any further back
gdb_test "record function-call-history -" "At the start of the branch trace record\\." "backward - 4"

# moving forward again, but this time with file and line number, expected to see the first 15 entries
gdb_test "record function-call-history /l +" [join [list \
  ".*$srcfile:40-41\tmain" \
  ".*$srcfile:22-24\tinc" \
  ".*$srcfile:40-41\tmain" \
  ".*$srcfile:22-24\tinc" \
  ".*$srcfile:40-41\tmain" \
  ".*$srcfile:22-24\tinc" \
  ".*$srcfile:40-41\tmain" \
  ".*$srcfile:22-24\tinc" \
  ".*$srcfile:40-41\tmain" \
  ".*$srcfile:22-24\tinc" \
  ".*$srcfile:40-41\tmain" \
  ".*$srcfile:22-24\tinc" \
  ".*$srcfile:40-41\tmain" \
  ".*$srcfile:22-24\tinc" \
  ".*$srcfile:40-41\tmain"] "\r\n"] "forward /l - 1"

# moving forward and expect to see the latest 6 entries
gdb_test "record function-call-history /l +" [join [list \
  ".*$srcfile:22-24\tinc" \
  ".*$srcfile:40-41\tmain" \
  ".*$srcfile:22-24\tinc" \
  ".*$srcfile:40-41\tmain" \
  ".*$srcfile:22-24\tinc" \
  ".*$srcfile:40-43\tmain"] "\r\n"] "forward /l - 2"

# moving further forward shouldn't work
gdb_test "record function-call-history /l +" "At the end of the branch trace record\\." "forward /l - 3"
gdb_test "record function-call-history /l" "At the end of the branch trace record\\." "forward /l - 4"

set expected_range [join [list \
  "3\tinc" \
  "4\tmain" \
  "5\tinc" \
  "6\tmain" \
  "7\tinc" \
  "8\tmain" \
  "9\tinc"] "\r\n"]

# show functions in instruction range
gdb_test "record function-call-history 3,10" $expected_range
gdb_test "record function-call-history 3,+7" $expected_range
gdb_test "record function-call-history 10,-7" $expected_range

# set bp after fib recursion and continue
set bp_location [gdb_get_line_number "bp.2" $testfile.c]
gdb_breakpoint $bp_location
gdb_continue_to_breakpoint "cont to $bp_location" ".*$testfile.c:$bp_location.*"

# at this point we expect to have main, fib, ..., fib, main, where fib occurs 8 times,
# so we limit the output to only show the latest 10 function calls
gdb_test_no_output "set record function-call-history-size 10"
set message "recursive"
gdb_test_multiple "record function-call-history" $message {
    -re "13\tmain\r\n14\tfib\r\n15\tfib\r\n16\tfib\r\n17\tfib\r\n18\tfib\r\n19\tfib\r\n20\tfib\r\n21\tfib\r\n22	 main\r\n$gdb_prompt $" {
        pass $message
    }
    -re "13\tinc\r\n14\tmain\r\n15\tinc\r\n16\tmain\r\n17\tinc\r\n18\tmain\r\n19\tinc\r\n20\tmain\r\n21\tfib\r\n22\tmain\r\n$gdb_prompt $" {
        # recursive function calls appear only as 1 call
        kfail "gdb/15240" $message
    }
}
